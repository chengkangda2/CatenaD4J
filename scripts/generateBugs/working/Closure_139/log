---
Begin generate bug_id: Closure_139
num_of_hunks: 9
timeout for running: 3600
use working dir: ./working/data/Closure_139
Try to checkout Closure_139
build dir: ['./working/data/Closure_139/build/classes', './working/data/Closure_139/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/Normalize.java
trying to replace old failing tests
edit: replace from 161 range 30 at test/com/google/javascript/jscomp/NormalizeTest.java
to
  public void testNormalizeFunctionDeclarations$catena_0() throws Exception {
    testSame("function f() {}");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_1() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("var f = function () {}");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_2() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_3() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("var f = function g() {}");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_4() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_5() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    test("{function g() {}}",
         "{var g = function () {}}");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_6() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("if (function g() {}) {}");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_7() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_8() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_9() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("switch (function g() {}) {}");                                                                /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_10() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   /***** ORIGINAL ASSERTION IS HERE *****/


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_11() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    testSameInFunction("function f() {}");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_12() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_13() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_14() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNormalizeFunctionDeclarations$catena_15() throws Exception {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function () {}");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f = function f() {}",
         "var f = function f$$1() {}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("var f = function g() {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("a:function g() {}",
         "a:{ var g = function () {} }");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("{function g() {}}",
         "{var g = function () {}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("if (function g() {}) {}");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {function g() {}}",
         "if (true) {var g = function () {}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (true) {} else {function g() {}}",
         "if (true) {} else {var g = function () {}}");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("switch (function g() {}) {}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("switch (1) { case 1: function g() {}}",
         "switch (1) { case 1: var g = function () {}}");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}


    try{ testSameInFunction("function f() {}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); a:function g() {}",
                   "f(); a:{ var g = function () {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); {function g() {}}",
                   "f(); {var g = function () {}}");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testInFunction("f(); if (true) {function g() {}}",
                   "f(); if (true) {var g = function () {}}");                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    testInFunction("if (true) {} else {function g() {}}",
                   "if (true) {} else {var g = function () {}}");                                           /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 254 range 23 at test/com/google/javascript/jscomp/NormalizeTest.java
to
  public void testRemoveDuplicateVarDeclarations3$catena_0() {
    test("var f = 1; function f(){}",
         "f = 1; function f(){}");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("var f; function f(){}",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { var f = 1; } else { function f(){} }",
         "if (a) { var f = 1; } else { f = function (){} }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("function f(){} var f = 1;",
         "function f(){} f = 1;");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(){} var f;",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { var f = 1; }",
         "if (a) { var f = function (){} } else { f = 1; }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Do we need to handle this differently for "third_party"
    // mode? Remove the previous function definitions?
    try{ test("function f(){} function f(){}",
         "function f(){} function f(){}",
         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { function f(){} }",
         "if (a) { var f = function (){} } else { f = function (){} }");                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testRemoveDuplicateVarDeclarations3$catena_1() {
    try{ test("var f = 1; function f(){}",
         "f = 1; function f(){}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    test("var f; function f(){}",
         "function f(){}");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("if (a) { var f = 1; } else { function f(){} }",
         "if (a) { var f = 1; } else { f = function (){} }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("function f(){} var f = 1;",
         "function f(){} f = 1;");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(){} var f;",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { var f = 1; }",
         "if (a) { var f = function (){} } else { f = 1; }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Do we need to handle this differently for "third_party"
    // mode? Remove the previous function definitions?
    try{ test("function f(){} function f(){}",
         "function f(){} function f(){}",
         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { function f(){} }",
         "if (a) { var f = function (){} } else { f = function (){} }");                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testRemoveDuplicateVarDeclarations3$catena_2() {
    try{ test("var f = 1; function f(){}",
         "f = 1; function f(){}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f; function f(){}",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    test("if (a) { var f = 1; } else { function f(){} }",
         "if (a) { var f = 1; } else { f = function (){} }");                                               /***** ORIGINAL ASSERTION IS HERE *****/

    try{ test("function f(){} var f = 1;",
         "function f(){} f = 1;");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(){} var f;",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { var f = 1; }",
         "if (a) { var f = function (){} } else { f = 1; }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Do we need to handle this differently for "third_party"
    // mode? Remove the previous function definitions?
    try{ test("function f(){} function f(){}",
         "function f(){} function f(){}",
         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { function f(){} }",
         "if (a) { var f = function (){} } else { f = function (){} }");                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testRemoveDuplicateVarDeclarations3$catena_3() {
    try{ test("var f = 1; function f(){}",
         "f = 1; function f(){}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f; function f(){}",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { var f = 1; } else { function f(){} }",
         "if (a) { var f = 1; } else { f = function (){} }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    test("function f(){} var f = 1;",
         "function f(){} f = 1;");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("function f(){} var f;",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { var f = 1; }",
         "if (a) { var f = function (){} } else { f = 1; }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Do we need to handle this differently for "third_party"
    // mode? Remove the previous function definitions?
    try{ test("function f(){} function f(){}",
         "function f(){} function f(){}",
         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { function f(){} }",
         "if (a) { var f = function (){} } else { f = function (){} }");                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testRemoveDuplicateVarDeclarations3$catena_4() {
    try{ test("var f = 1; function f(){}",
         "f = 1; function f(){}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f; function f(){}",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { var f = 1; } else { function f(){} }",
         "if (a) { var f = 1; } else { f = function (){} }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("function f(){} var f = 1;",
         "function f(){} f = 1;");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    test("function f(){} var f;",
         "function f(){}");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("if (a) { function f(){} } else { var f = 1; }",
         "if (a) { var f = function (){} } else { f = 1; }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Do we need to handle this differently for "third_party"
    // mode? Remove the previous function definitions?
    try{ test("function f(){} function f(){}",
         "function f(){} function f(){}",
         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { function f(){} }",
         "if (a) { var f = function (){} } else { f = function (){} }");                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testRemoveDuplicateVarDeclarations3$catena_5() {
    try{ test("var f = 1; function f(){}",
         "f = 1; function f(){}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f; function f(){}",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { var f = 1; } else { function f(){} }",
         "if (a) { var f = 1; } else { f = function (){} }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("function f(){} var f = 1;",
         "function f(){} f = 1;");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(){} var f;",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    test("if (a) { function f(){} } else { var f = 1; }",
         "if (a) { var f = function (){} } else { f = 1; }");                                               /***** ORIGINAL ASSERTION IS HERE *****/

    // TODO(johnlenz): Do we need to handle this differently for "third_party"
    // mode? Remove the previous function definitions?
    try{ test("function f(){} function f(){}",
         "function f(){} function f(){}",
         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { function f(){} }",
         "if (a) { var f = function (){} } else { f = function (){} }");                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testRemoveDuplicateVarDeclarations3$catena_6() {
    try{ test("var f = 1; function f(){}",
         "f = 1; function f(){}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f; function f(){}",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { var f = 1; } else { function f(){} }",
         "if (a) { var f = 1; } else { f = function (){} }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("function f(){} var f = 1;",
         "function f(){} f = 1;");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(){} var f;",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { var f = 1; }",
         "if (a) { var f = function (){} } else { f = 1; }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Do we need to handle this differently for "third_party"
    // mode? Remove the previous function definitions?
    test("function f(){} function f(){}",
         "function f(){} function f(){}",
         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("if (a) { function f(){} } else { function f(){} }",
         "if (a) { var f = function (){} } else { f = function (){} }");                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testRemoveDuplicateVarDeclarations3$catena_7() {
    try{ test("var f = 1; function f(){}",
         "f = 1; function f(){}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var f; function f(){}",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { var f = 1; } else { function f(){} }",
         "if (a) { var f = 1; } else { f = function (){} }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("function f(){} var f = 1;",
         "function f(){} f = 1;");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(){} var f;",
         "function f(){}");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if (a) { function f(){} } else { var f = 1; }",
         "if (a) { var f = function (){} } else { f = 1; }");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Do we need to handle this differently for "third_party"
    // mode? Remove the previous function definitions?
    try{ test("function f(){} function f(){}",
         "function f(){} function f(){}",
         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    test("if (a) { function f(){} } else { function f(){} }",
         "if (a) { var f = function (){} } else { f = function (){} }");                                    /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 139 range 9 at test/com/google/javascript/jscomp/NormalizeTest.java
to
  public void testMoveFunctions2$catena_0() throws Exception {
    testSame("function f() { function foo() {} }");                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("function f() { f(); a:function bar() {} }",
         "function f() { f(); a:{ var bar = function () {} }}");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f() { f(); {function bar() {}}}",
         "function f() { f(); {var bar = function () {}}}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f() { f(); if (true) {function bar() {}}}",
         "function f() { f(); if (true) {var bar = function () {}}}");                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMoveFunctions2$catena_1() throws Exception {
    try{ testSame("function f() { function foo() {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    test("function f() { f(); a:function bar() {} }",
         "function f() { f(); a:{ var bar = function () {} }}");                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("function f() { f(); {function bar() {}}}",
         "function f() { f(); {var bar = function () {}}}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f() { f(); if (true) {function bar() {}}}",
         "function f() { f(); if (true) {var bar = function () {}}}");                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMoveFunctions2$catena_2() throws Exception {
    try{ testSame("function f() { function foo() {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f() { f(); a:function bar() {} }",
         "function f() { f(); a:{ var bar = function () {} }}");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    test("function f() { f(); {function bar() {}}}",
         "function f() { f(); {var bar = function () {}}}");                                                /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("function f() { f(); if (true) {function bar() {}}}",
         "function f() { f(); if (true) {var bar = function () {}}}");                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMoveFunctions2$catena_3() throws Exception {
    try{ testSame("function f() { function foo() {} }");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f() { f(); a:function bar() {} }",
         "function f() { f(); a:{ var bar = function () {} }}");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f() { f(); {function bar() {}}}",
         "function f() { f(); {var bar = function () {}}}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    test("function f() { f(); if (true) {function bar() {}}}",
         "function f() { f(); if (true) {var bar = function () {}}}");                                      /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/NormalizeTest.java
new test num: 28
ori test num: 0
pattern: 000000000
patches are written to file
running tests...
used time: Finished in 141.69 seconds
Failing tests: 17
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
processed: 000000000
pattern: 000000001
try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000001
pattern: 000000010
try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000010
pattern: 000000100
try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000100
pattern: 000001000
try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001000
pattern: 000010000
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010000
pattern: 000100000
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100000
pattern: 001000000
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000000
pattern: 010000000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000
pattern: 100000000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000
pattern: 000000011
try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
used time: Finished in 133.36 seconds
Failing tests: 15
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix ['com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1', 'com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0']
select new bug
Pattern: 000000011
new failing tests:
com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
Save found bug
processed: 000000011
pattern: 000000101
try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000101
pattern: 000000110
try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000110
pattern: 000001001
try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001001
pattern: 000001010
try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001010
pattern: 000001100
try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001100
pattern: 000010001
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010001
pattern: 000010010
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010010
pattern: 000010100
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010100
pattern: 000011000
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011000
pattern: 000100001
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100001
pattern: 000100010
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100010
pattern: 000100100
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100100
pattern: 000101000
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101000
pattern: 000110000
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110000
pattern: 001000001
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000001
pattern: 001000010
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000010
pattern: 001000100
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 109.39 seconds
Failing tests: 17
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 001000100
pattern: 001001000
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001000
pattern: 001010000
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010000
pattern: 001100000
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100000
pattern: 010000001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000001
pattern: 010000010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000010
pattern: 010000100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000100
pattern: 010001000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001000
pattern: 010010000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010000
pattern: 010100000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100000
pattern: 011000000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000000
pattern: 100000001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000001
pattern: 100000010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000010
pattern: 100000100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000100
pattern: 100001000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100001000
pattern: 100010000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100010000
pattern: 100100000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100100000
pattern: 101000000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101000000
pattern: 110000000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110000000
pattern: 000000111
try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000111
pattern: 000001011
try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001011
pattern: 000001101
try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001101
pattern: 000001110
try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001110
pattern: 000010011
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010011
pattern: 000010101
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010101
pattern: 000010110
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010110
pattern: 000011001
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011001
pattern: 000011010
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011010
pattern: 000011100
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011100
pattern: 000100011
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100011
pattern: 000100101
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100101
pattern: 000100110
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100110
pattern: 000101001
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101001
pattern: 000101010
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101010
pattern: 000101100
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101100
pattern: 000110001
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110001
pattern: 000110010
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110010
pattern: 000110100
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110100
pattern: 000111000
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111000
pattern: 001000011
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000011
pattern: 001000101
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000101
pattern: 001000110
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000110
pattern: 001001001
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001001
pattern: 001001010
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001010
pattern: 001001100
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001100
pattern: 001010001
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010001
pattern: 001010010
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010010
pattern: 001010100
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010100
pattern: 001011000
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011000
pattern: 001100001
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100001
pattern: 001100010
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100010
pattern: 001100100
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 117.27 seconds
Failing tests: 17
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 001100100
pattern: 001101000
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101000
pattern: 001110000
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110000
pattern: 010000011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000011
pattern: 010000101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000101
pattern: 010000110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000110
pattern: 010001001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001001
pattern: 010001010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001010
pattern: 010001100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001100
pattern: 010010001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010001
pattern: 010010010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010010
pattern: 010010100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010100
pattern: 010011000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011000
pattern: 010100001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100001
pattern: 010100010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100010
pattern: 010100100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100100
pattern: 010101000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101000
pattern: 010110000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110000
pattern: 011000001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000001
pattern: 011000010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000010
pattern: 011000100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 110.35 seconds
Failing tests: 17
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 011000100
pattern: 011001000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001000
pattern: 011010000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010000
pattern: 011100000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011100000
pattern: 100000011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000011
pattern: 100000101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000101
pattern: 100000110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000110
pattern: 100001001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100001001
pattern: 100001010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100001010
pattern: 100001100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100001100
pattern: 100010001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100010001
pattern: 100010010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100010010
pattern: 100010100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100010100
pattern: 100011000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100011000
pattern: 100100001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100100001
pattern: 100100010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100100010
pattern: 100100100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100100100
pattern: 100101000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100101000
pattern: 100110000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100110000
pattern: 101000001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101000001
pattern: 101000010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101000010
pattern: 101000100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101000100
pattern: 101001000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101001000
pattern: 101010000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101010000
pattern: 101100000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101100000
pattern: 110000001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110000001
pattern: 110000010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110000010
pattern: 110000100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110000100
pattern: 110001000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110001000
pattern: 110010000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110010000
pattern: 110100000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110100000
pattern: 111000000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111000000
pattern: 000001111
try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001111
pattern: 000010111
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010111
pattern: 000011011
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011011
pattern: 000011101
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011101
pattern: 000011110
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011110
pattern: 000100111
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100111
pattern: 000101011
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101011
pattern: 000101101
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101101
pattern: 000101110
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101110
pattern: 000110011
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110011
pattern: 000110101
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110101
pattern: 000110110
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110110
pattern: 000111001
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111001
pattern: 000111010
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111010
pattern: 000111100
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111100
pattern: 001000111
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
used time: Finished in 113.16 seconds
Failing tests: 15
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 001000111
pattern: 001001011
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001011
pattern: 001001101
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001101
pattern: 001001110
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001110
pattern: 001010011
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010011
pattern: 001010101
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010101
pattern: 001010110
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010110
pattern: 001011001
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011001
pattern: 001011010
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011010
pattern: 001011100
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011100
pattern: 001100011
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100011
pattern: 001100101
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100101
pattern: 001100110
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100110
pattern: 001101001
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101001
pattern: 001101010
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101010
pattern: 001101100
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 103.86 seconds
Failing tests: 17
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 001101100
pattern: 001110001
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110001
pattern: 001110010
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110010
pattern: 001110100
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 114.07 seconds
Failing tests: 17
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 001110100
pattern: 001111000
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001111000
pattern: 010000111
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000111
pattern: 010001011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001011
pattern: 010001101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001101
pattern: 010001110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001110
pattern: 010010011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010011
pattern: 010010101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010101
pattern: 010010110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010110
pattern: 010011001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011001
pattern: 010011010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011010
pattern: 010011100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011100
pattern: 010100011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100011
pattern: 010100101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100101
pattern: 010100110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100110
pattern: 010101001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101001
pattern: 010101010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101010
pattern: 010101100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101100
pattern: 010110001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110001
pattern: 010110010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110010
pattern: 010110100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110100
pattern: 010111000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010111000
pattern: 011000011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000011
pattern: 011000101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000101
pattern: 011000110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000110
pattern: 011001001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001001
pattern: 011001010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001010
pattern: 011001100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001100
pattern: 011010001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010001
pattern: 011010010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010010
pattern: 011010100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010100
pattern: 011011000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011011000
pattern: 011100001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011100001
pattern: 011100010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011100010
pattern: 011100100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 117.37 seconds
Failing tests: 17
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 011100100
pattern: 011101000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011101000
pattern: 011110000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011110000
pattern: 100000111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000111
pattern: 100001011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100001011
pattern: 100001101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100001101
pattern: 100001110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100001110
pattern: 100010011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100010011
pattern: 100010101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100010101
pattern: 100010110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100010110
pattern: 100011001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100011001
pattern: 100011010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100011010
pattern: 100011100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100011100
pattern: 100100011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100100011
pattern: 100100101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100100101
pattern: 100100110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100100110
pattern: 100101001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100101001
pattern: 100101010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100101010
pattern: 100101100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100101100
pattern: 100110001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100110001
pattern: 100110010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100110010
pattern: 100110100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100110100
pattern: 100111000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100111000
pattern: 101000011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101000011
pattern: 101000101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101000101
pattern: 101000110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101000110
pattern: 101001001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101001001
pattern: 101001010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101001010
pattern: 101001100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101001100
pattern: 101010001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101010001
pattern: 101010010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101010010
pattern: 101010100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101010100
pattern: 101011000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101011000
pattern: 101100001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101100001
pattern: 101100010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101100010
pattern: 101100100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101100100
pattern: 101101000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101101000
pattern: 101110000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101110000
pattern: 110000011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110000011
pattern: 110000101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110000101
pattern: 110000110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110000110
pattern: 110001001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110001001
pattern: 110001010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110001010
pattern: 110001100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110001100
pattern: 110010001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110010001
pattern: 110010010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110010010
pattern: 110010100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110010100
pattern: 110011000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110011000
pattern: 110100001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110100001
pattern: 110100010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110100010
pattern: 110100100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110100100
pattern: 110101000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110101000
pattern: 110110000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110110000
pattern: 111000001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111000001
pattern: 111000010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111000010
pattern: 111000100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 113.90 seconds
Failing tests: 18
	com.google.javascript.jscomp.InlineVariablesTest::testInlineIntoNestedNonHoistedNamedFunctions
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Includes new failing tests, set to unusable
processed: 111000100
pattern: 111001000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111001000
pattern: 111010000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111010000
pattern: 111100000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111100000
pattern: 000011111
try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011111
pattern: 000101111
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101111
pattern: 000110111
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110111
pattern: 000111011
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111011
pattern: 000111101
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111101
pattern: 000111110
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111110
pattern: 001001111
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001111
pattern: 001010111
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010111
pattern: 001011011
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011011
pattern: 001011101
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011101
pattern: 001011110
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011110
pattern: 001100111
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
used time: Finished in 113.57 seconds
Failing tests: 15
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 001100111
pattern: 001101011
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101011
pattern: 001101101
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101101
pattern: 001101110
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101110
pattern: 001110011
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110011
pattern: 001110101
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110101
pattern: 001110110
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110110
pattern: 001111001
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001111001
pattern: 001111010
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001111010
pattern: 001111100
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 114.27 seconds
Failing tests: 17
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 001111100
pattern: 010001111
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001111
pattern: 010010111
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010111
pattern: 010011011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011011
pattern: 010011101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011101
pattern: 010011110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011110
pattern: 010100111
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100111
pattern: 010101011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101011
pattern: 010101101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101101
pattern: 010101110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101110
pattern: 010110011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110011
pattern: 010110101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110101
pattern: 010110110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110110
pattern: 010111001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010111001
pattern: 010111010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010111010
pattern: 010111100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010111100
pattern: 011000111
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
used time: Finished in 118.08 seconds
Failing tests: 15
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 011000111
pattern: 011001011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001011
pattern: 011001101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001101
pattern: 011001110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001110
pattern: 011010011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010011
pattern: 011010101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010101
pattern: 011010110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010110
pattern: 011011001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011011001
pattern: 011011010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011011010
pattern: 011011100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011011100
pattern: 011100011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011100011
pattern: 011100101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011100101
pattern: 011100110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011100110
pattern: 011101001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011101001
pattern: 011101010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011101010
pattern: 011101100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 113.28 seconds
Failing tests: 17
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 011101100
pattern: 011110001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011110001
pattern: 011110010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011110010
pattern: 011110100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 108.94 seconds
Failing tests: 17
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 011110100
pattern: 011111000
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011111000
pattern: 100001111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100001111
pattern: 100010111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100010111
pattern: 100011011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100011011
pattern: 100011101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100011101
pattern: 100011110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100011110
pattern: 100100111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100100111
pattern: 100101011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100101011
pattern: 100101101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100101101
pattern: 100101110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100101110
pattern: 100110011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100110011
pattern: 100110101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100110101
pattern: 100110110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100110110
pattern: 100111001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100111001
pattern: 100111010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100111010
pattern: 100111100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100111100
pattern: 101000111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101000111
pattern: 101001011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101001011
pattern: 101001101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101001101
pattern: 101001110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101001110
pattern: 101010011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101010011
pattern: 101010101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101010101
pattern: 101010110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101010110
pattern: 101011001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101011001
pattern: 101011010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101011010
pattern: 101011100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101011100
pattern: 101100011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101100011
pattern: 101100101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101100101
pattern: 101100110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101100110
pattern: 101101001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101101001
pattern: 101101010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101101010
pattern: 101101100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101101100
pattern: 101110001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101110001
pattern: 101110010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101110010
pattern: 101110100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101110100
pattern: 101111000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101111000
pattern: 110000111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110000111
pattern: 110001011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110001011
pattern: 110001101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110001101
pattern: 110001110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110001110
pattern: 110010011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110010011
pattern: 110010101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110010101
pattern: 110010110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110010110
pattern: 110011001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110011001
pattern: 110011010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110011010
pattern: 110011100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110011100
pattern: 110100011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110100011
pattern: 110100101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110100101
pattern: 110100110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110100110
pattern: 110101001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110101001
pattern: 110101010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110101010
pattern: 110101100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110101100
pattern: 110110001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110110001
pattern: 110110010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110110010
pattern: 110110100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110110100
pattern: 110111000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110111000
pattern: 111000011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111000011
pattern: 111000101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111000101
pattern: 111000110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111000110
pattern: 111001001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111001001
pattern: 111001010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111001010
pattern: 111001100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111001100
pattern: 111010001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111010001
pattern: 111010010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111010010
pattern: 111010100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111010100
pattern: 111011000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111011000
pattern: 111100001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111100001
pattern: 111100010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111100010
pattern: 111100100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 109.28 seconds
Failing tests: 18
	com.google.javascript.jscomp.InlineVariablesTest::testInlineIntoNestedNonHoistedNamedFunctions
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Includes new failing tests, set to unusable
processed: 111100100
pattern: 111101000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111101000
pattern: 111110000
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111110000
pattern: 000111111
try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111111
pattern: 001011111
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011111
pattern: 001101111
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
used time: Finished in 110.91 seconds
Failing tests: 15
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 001101111
pattern: 001110111
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
used time: Finished in 110.35 seconds
Failing tests: 15
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 001110111
pattern: 001111011
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001111011
pattern: 001111101
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001111101
pattern: 001111110
try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001111110
pattern: 010011111
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011111
pattern: 010101111
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101111
pattern: 010110111
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110111
pattern: 010111011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010111011
pattern: 010111101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010111101
pattern: 010111110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010111110
pattern: 011001111
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001111
pattern: 011010111
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010111
pattern: 011011011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011011011
pattern: 011011101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011011101
pattern: 011011110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011011110
pattern: 011100111
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
used time: Finished in 109.61 seconds
Failing tests: 15
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 011100111
pattern: 011101011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011101011
pattern: 011101101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011101101
pattern: 011101110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011101110
pattern: 011110011
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011110011
pattern: 011110101
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011110101
pattern: 011110110
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011110110
pattern: 011111001
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011111001
pattern: 011111010
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011111010
pattern: 011111100
try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
used time: Finished in 104.36 seconds
Failing tests: 17
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_1
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_2
	com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2$catena_3
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_2
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_5
	com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_10
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_12
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_13
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_14
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_15
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_4
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_5
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_7
	com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations$catena_8
Can independently fix []
Could not fix independently
processed: 011111100
pattern: 100011111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100011111
pattern: 100101111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100101111
pattern: 100110111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100110111
pattern: 100111011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100111011
pattern: 100111101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100111101
pattern: 100111110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100111110
pattern: 101001111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101001111
pattern: 101010111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101010111
pattern: 101011011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101011011
pattern: 101011101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101011101
pattern: 101011110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101011110
pattern: 101100111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101100111
pattern: 101101011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101101011
pattern: 101101101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101101101
pattern: 101101110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101101110
pattern: 101110011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101110011
pattern: 101110101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101110101
pattern: 101110110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101110110
pattern: 101111001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101111001
pattern: 101111010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101111010
pattern: 101111100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101111100
pattern: 110001111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110001111
pattern: 110010111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110010111
pattern: 110011011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110011011
pattern: 110011101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110011101
pattern: 110011110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110011110
pattern: 110100111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110100111
pattern: 110101011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110101011
pattern: 110101101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110101101
pattern: 110101110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110101110
pattern: 110110011
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110110011
pattern: 110110101
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110110101
pattern: 110110110
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110110110
pattern: 110111001
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110111001
pattern: 110111010
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110111010
pattern: 110111100
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 3
insert before 310 with       Node oldNameNode = n.getFirstChild();
      Node fnNameNode = oldNameNode.cloneNode();
      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
      var.copyInformationFrom(n);

try to fix hunk: 4
insert before 312 with       oldNameNode.setString("");

try to fix hunk: 5
insert before 314 with       Node parent = n.getParent();
      parent.replaceChild(n, var);
      fnNameNode.addChildToFront(n);

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110111100
pattern: 111000111
try to fix hunk: 0
insert before 281 with         case Token.FUNCTION:
          normalizeFunctionDeclaration(n);
          break;

try to fix hunk: 1
insert before 292 with     private void normalizeFunctionDeclaration(Node n) {
      Preconditions.checkState(n.getType() == Token.FUNCTION);
      if (!NodeUtil.isFunctionAnonymous(n)
          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
        rewriteFunctionDeclaration(n);
      }
    }

try to fix hunk: 2
insert before 309 with     private void rewriteFunctionDeclaration(Node n) {

try to fix hunk: 6
insert before 315 with       reportCodeChange("Function declaration");
    }

try to fix hunk: 7
replace from 521 with range 1 to
      Var v = s.getVar(name);

try to fix hunk: 8
insert before 523 with       Preconditions.checkState(
          v == null || v.getParentNode().getType() != Token.CATCH);
      if (v != null && parent.getType() == Token.FUNCTION) {
        if (v.getParentNode().getType() == Token.VAR) {
          s.undeclare(v);
          s.declare(name, n, n.getJSType(), v.input);
          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
              v.getParentNode().getParent());
        }
      } else if (parent.getType() == Token.VAR) {

patches are written to file
running tests...
EXCEPTION: Inside Exception generator.run() timeout
Traceback (most recent call last):
  File "run.py", line 30, in task
    generator.run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 83, in run
    self._run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 109, in _run
    self.taskSingleHunk(task)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 138, in taskSingleHunk
    failure = util.get_failing_tests(self.path, self.build_dir)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 46, in get_failing_tests
    result = runCommand(['defects4j', 'test', '-w', '{}'.format(path)], timeout=timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 9, in runCommand
    finished = subprocess.run(cmd, capture_output=True, cwd=cwd, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1868, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 69, in handler
    _raise_exception(timeout_exception, exception_message)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 47, in _raise_exception
    raise exception(exception_message)
TimeoutError: generator.run() timeout

