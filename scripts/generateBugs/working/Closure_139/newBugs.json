{
    "original": {
        "num_of_hunks": 9,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/Normalize.java",
            "replaced_with": "        case Token.FUNCTION:\n          normalizeFunctionDeclaration(n);\n          break;\n",
            "patch_type": "insert",
            "next_line_no": 281
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/Normalize.java",
            "replaced_with": "    private void normalizeFunctionDeclaration(Node n) {\n      Preconditions.checkState(n.getType() == Token.FUNCTION);\n      if (!NodeUtil.isFunctionAnonymous(n)\n          && !NodeUtil.isHoistedFunctionDeclaration(n)) {\n        rewriteFunctionDeclaration(n);\n      }\n    }\n",
            "patch_type": "insert",
            "next_line_no": 292
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/Normalize.java",
            "replaced_with": "    private void rewriteFunctionDeclaration(Node n) {\n",
            "patch_type": "insert",
            "next_line_no": 309
        },
        "3": {
            "file_name": "src/com/google/javascript/jscomp/Normalize.java",
            "replaced_with": "      Node oldNameNode = n.getFirstChild();\n      Node fnNameNode = oldNameNode.cloneNode();\n      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());\n      var.copyInformationFrom(n);\n",
            "patch_type": "insert",
            "next_line_no": 310
        },
        "4": {
            "file_name": "src/com/google/javascript/jscomp/Normalize.java",
            "replaced_with": "      oldNameNode.setString(\"\");\n",
            "patch_type": "insert",
            "next_line_no": 312
        },
        "5": {
            "file_name": "src/com/google/javascript/jscomp/Normalize.java",
            "replaced_with": "      Node parent = n.getParent();\n      parent.replaceChild(n, var);\n      fnNameNode.addChildToFront(n);\n",
            "patch_type": "insert",
            "next_line_no": 314
        },
        "6": {
            "file_name": "src/com/google/javascript/jscomp/Normalize.java",
            "replaced_with": "      reportCodeChange(\"Function declaration\");\n    }\n",
            "patch_type": "insert",
            "next_line_no": 315
        },
        "7": {
            "file_name": "src/com/google/javascript/jscomp/Normalize.java",
            "from_line_no": 521,
            "to_line_no": 521,
            "replaced_with": "      Var v = s.getVar(name);\n",
            "replaced": "      if (parent.getType() == Token.VAR) {\n",
            "patch_type": "replace",
            "next_line_no": 522
        },
        "8": {
            "file_name": "src/com/google/javascript/jscomp/Normalize.java",
            "replaced_with": "      Preconditions.checkState(\n          v == null || v.getParentNode().getType() != Token.CATCH);\n      if (v != null && parent.getType() == Token.FUNCTION) {\n        if (v.getParentNode().getType() == Token.VAR) {\n          s.undeclare(v);\n          s.declare(name, n, n.getJSType(), v.input);\n          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),\n              v.getParentNode().getParent());\n        }\n      } else if (parent.getType() == Token.VAR) {\n",
            "patch_type": "insert",
            "next_line_no": 523
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations",
            "com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3",
            "com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2"
        ],
        "com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations": {
            "file_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
            "check": [
                "Use pattern matching: .testSameInFunction",
                "Use pattern matching: .testInFunction",
                "Use pattern matching: .testInFunction",
                "Use pattern matching: .testInFunction",
                "Use pattern matching: .testInFunction"
            ],
            "Instance": "Begin: Pos(161, 10)\nEnd: Pos(190, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java\nName: testNormalizeFunctionDeclarations\nChilds: [StatementAssertion<Begin: Pos(162, 5), End: Pos(162, 32)>,\nStatementAssertion<Begin: Pos(163, 5), End: Pos(163, 39)>,\nStatementAssertion<Begin: Pos(164, 5), End: Pos(165, 39)>,\nStatementAssertion<Begin: Pos(166, 5), End: Pos(166, 40)>,\nStatementAssertion<Begin: Pos(167, 5), End: Pos(168, 41)>,\nStatementAssertion<Begin: Pos(169, 5), End: Pos(170, 37)>,\nStatementAssertion<Begin: Pos(171, 5), End: Pos(171, 40)>,\nStatementAssertion<Begin: Pos(172, 5), End: Pos(173, 47)>,\nStatementAssertion<Begin: Pos(174, 5), End: Pos(175, 55)>,\nStatementAssertion<Begin: Pos(176, 5), End: Pos(176, 44)>,\nStatementAssertion<Begin: Pos(177, 5), End: Pos(178, 57)>,\nStatementAssertion<Begin: Pos(181, 5), End: Pos(181, 42)>,\nStatementAssertion<Begin: Pos(182, 5), End: Pos(183, 56)>,\nStatementAssertion<Begin: Pos(184, 5), End: Pos(185, 52)>,\nStatementAssertion<Begin: Pos(186, 5), End: Pos(187, 62)>,\nStatementAssertion<Begin: Pos(188, 5), End: Pos(189, 65)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java",
            "name": "testNormalizeFunctionDeclarations",
            "begin": "Pos(161, 10)",
            "end": "Pos(190, 3)",
            "begin_line_no": 161,
            "end_line_no": 190,
            "child": [
                "Begin: Pos(162, 5)\nEnd: Pos(162, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(163, 5)\nEnd: Pos(163, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(164, 5)\nEnd: Pos(165, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(166, 5)\nEnd: Pos(166, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(167, 5)\nEnd: Pos(168, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(169, 5)\nEnd: Pos(170, 37)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(171, 5)\nEnd: Pos(171, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(172, 5)\nEnd: Pos(173, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(174, 5)\nEnd: Pos(175, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(176, 5)\nEnd: Pos(176, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(177, 5)\nEnd: Pos(178, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(181, 5)\nEnd: Pos(181, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(182, 5)\nEnd: Pos(183, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(184, 5)\nEnd: Pos(185, 52)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(186, 5)\nEnd: Pos(187, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(188, 5)\nEnd: Pos(189, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testNormalizeFunctionDeclarations$catena_0() throws Exception {\n    testSame(\"function f() {}\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_1() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"var f = function () {}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_2() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_3() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"var f = function g() {}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_4() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_5() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_6() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"if (function g() {}) {}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_7() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_8() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_9() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"switch (function g() {}) {}\");                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_10() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_11() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    testSameInFunction(\"function f() {}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_12() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_13() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_14() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNormalizeFunctionDeclarations$catena_15() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testNormalizeFunctionDeclarations$catena_0() throws Exception {\n    testSame(\"function f() {}\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testNormalizeFunctionDeclarations$catena_1() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"var f = function () {}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testNormalizeFunctionDeclarations$catena_2() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testNormalizeFunctionDeclarations$catena_3() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"var f = function g() {}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testNormalizeFunctionDeclarations$catena_4() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testNormalizeFunctionDeclarations$catena_5() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testNormalizeFunctionDeclarations$catena_6() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"if (function g() {}) {}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testNormalizeFunctionDeclarations$catena_7() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  public void testNormalizeFunctionDeclarations$catena_8() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "9": "  public void testNormalizeFunctionDeclarations$catena_9() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"switch (function g() {}) {}\");                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "10": "  public void testNormalizeFunctionDeclarations$catena_10() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "11": "  public void testNormalizeFunctionDeclarations$catena_11() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    testSameInFunction(\"function f() {}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "12": "  public void testNormalizeFunctionDeclarations$catena_12() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "13": "  public void testNormalizeFunctionDeclarations$catena_13() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "14": "  public void testNormalizeFunctionDeclarations$catena_14() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "15": "  public void testNormalizeFunctionDeclarations$catena_15() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3": {
            "file_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
            "Instance": "Begin: Pos(254, 10)\nEnd: Pos(276, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java\nName: testRemoveDuplicateVarDeclarations3\nChilds: [StatementAssertion<Begin: Pos(255, 5), End: Pos(256, 34)>,\nStatementAssertion<Begin: Pos(257, 5), End: Pos(258, 27)>,\nStatementAssertion<Begin: Pos(259, 5), End: Pos(260, 61)>,\nStatementAssertion<Begin: Pos(262, 5), End: Pos(263, 34)>,\nStatementAssertion<Begin: Pos(264, 5), End: Pos(265, 27)>,\nStatementAssertion<Begin: Pos(266, 5), End: Pos(267, 61)>,\nStatementAssertion<Begin: Pos(271, 5), End: Pos(273, 60)>,\nStatementAssertion<Begin: Pos(274, 5), End: Pos(275, 72)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java",
            "name": "testRemoveDuplicateVarDeclarations3",
            "begin": "Pos(254, 10)",
            "end": "Pos(276, 3)",
            "begin_line_no": 254,
            "end_line_no": 276,
            "child": [
                "Begin: Pos(255, 5)\nEnd: Pos(256, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(257, 5)\nEnd: Pos(258, 27)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(259, 5)\nEnd: Pos(260, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(262, 5)\nEnd: Pos(263, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(264, 5)\nEnd: Pos(265, 27)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(266, 5)\nEnd: Pos(267, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(271, 5)\nEnd: Pos(273, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(274, 5)\nEnd: Pos(275, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testRemoveDuplicateVarDeclarations3$catena_0() {\n    test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testRemoveDuplicateVarDeclarations3$catena_1() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testRemoveDuplicateVarDeclarations3$catena_2() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testRemoveDuplicateVarDeclarations3$catena_3() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testRemoveDuplicateVarDeclarations3$catena_4() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testRemoveDuplicateVarDeclarations3$catena_5() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testRemoveDuplicateVarDeclarations3$catena_6() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testRemoveDuplicateVarDeclarations3$catena_7() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testRemoveDuplicateVarDeclarations3$catena_0() {\n    test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testRemoveDuplicateVarDeclarations3$catena_1() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testRemoveDuplicateVarDeclarations3$catena_2() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testRemoveDuplicateVarDeclarations3$catena_3() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testRemoveDuplicateVarDeclarations3$catena_4() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testRemoveDuplicateVarDeclarations3$catena_5() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testRemoveDuplicateVarDeclarations3$catena_6() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testRemoveDuplicateVarDeclarations3$catena_7() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2": {
            "file_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
            "Instance": "Begin: Pos(139, 10)\nEnd: Pos(147, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java\nName: testMoveFunctions2\nChilds: [StatementAssertion<Begin: Pos(140, 5), End: Pos(140, 51)>,\nStatementAssertion<Begin: Pos(141, 5), End: Pos(142, 64)>,\nStatementAssertion<Begin: Pos(143, 5), End: Pos(144, 60)>,\nStatementAssertion<Begin: Pos(145, 5), End: Pos(146, 70)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java",
            "name": "testMoveFunctions2",
            "begin": "Pos(139, 10)",
            "end": "Pos(147, 3)",
            "begin_line_no": 139,
            "end_line_no": 147,
            "child": [
                "Begin: Pos(140, 5)\nEnd: Pos(140, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(141, 5)\nEnd: Pos(142, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(143, 5)\nEnd: Pos(144, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(145, 5)\nEnd: Pos(146, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testMoveFunctions2$catena_0() throws Exception {\n    testSame(\"function f() { function foo() {} }\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f() { f(); a:function bar() {} }\",\n         \"function f() { f(); a:{ var bar = function () {} }}\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); {function bar() {}}}\",\n         \"function f() { f(); {var bar = function () {}}}\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); if (true) {function bar() {}}}\",\n         \"function f() { f(); if (true) {var bar = function () {}}}\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testMoveFunctions2$catena_1() throws Exception {\n    try{ testSame(\"function f() { function foo() {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f() { f(); a:function bar() {} }\",\n         \"function f() { f(); a:{ var bar = function () {} }}\");                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f() { f(); {function bar() {}}}\",\n         \"function f() { f(); {var bar = function () {}}}\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); if (true) {function bar() {}}}\",\n         \"function f() { f(); if (true) {var bar = function () {}}}\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testMoveFunctions2$catena_2() throws Exception {\n    try{ testSame(\"function f() { function foo() {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); a:function bar() {} }\",\n         \"function f() { f(); a:{ var bar = function () {} }}\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f() { f(); {function bar() {}}}\",\n         \"function f() { f(); {var bar = function () {}}}\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f() { f(); if (true) {function bar() {}}}\",\n         \"function f() { f(); if (true) {var bar = function () {}}}\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testMoveFunctions2$catena_3() throws Exception {\n    try{ testSame(\"function f() { function foo() {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); a:function bar() {} }\",\n         \"function f() { f(); a:{ var bar = function () {} }}\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); {function bar() {}}}\",\n         \"function f() { f(); {var bar = function () {}}}\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f() { f(); if (true) {function bar() {}}}\",\n         \"function f() { f(); if (true) {var bar = function () {}}}\");                                      /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testMoveFunctions2$catena_0() throws Exception {\n    testSame(\"function f() { function foo() {} }\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f() { f(); a:function bar() {} }\",\n         \"function f() { f(); a:{ var bar = function () {} }}\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); {function bar() {}}}\",\n         \"function f() { f(); {var bar = function () {}}}\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); if (true) {function bar() {}}}\",\n         \"function f() { f(); if (true) {var bar = function () {}}}\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testMoveFunctions2$catena_1() throws Exception {\n    try{ testSame(\"function f() { function foo() {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f() { f(); a:function bar() {} }\",\n         \"function f() { f(); a:{ var bar = function () {} }}\");                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f() { f(); {function bar() {}}}\",\n         \"function f() { f(); {var bar = function () {}}}\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); if (true) {function bar() {}}}\",\n         \"function f() { f(); if (true) {var bar = function () {}}}\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testMoveFunctions2$catena_2() throws Exception {\n    try{ testSame(\"function f() { function foo() {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); a:function bar() {} }\",\n         \"function f() { f(); a:{ var bar = function () {} }}\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f() { f(); {function bar() {}}}\",\n         \"function f() { f(); {var bar = function () {}}}\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f() { f(); if (true) {function bar() {}}}\",\n         \"function f() { f(); if (true) {var bar = function () {}}}\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testMoveFunctions2$catena_3() throws Exception {\n    try{ testSame(\"function f() { function foo() {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); a:function bar() {} }\",\n         \"function f() { f(); a:{ var bar = function () {} }}\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); {function bar() {}}}\",\n         \"function f() { f(); {var bar = function () {}}}\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f() { f(); if (true) {function bar() {}}}\",\n         \"function f() { f(); if (true) {var bar = function () {}}}\");                                      /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "000000011": {
        "failing_tests": [
            "com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_1",
            "com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3$catena_0"
        ]
    }
}