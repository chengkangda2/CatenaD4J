{
    "original": {
        "num_of_hunks": 4,
        "0": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 643
        },
        "1": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "from_line_no": 645,
            "to_line_no": 645,
            "replaced": "            }\n",
            "patch_type": "delete",
            "next_line_no": 646
        },
        "2": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 652
        },
        "3": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "from_line_no": 654,
            "to_line_no": 654,
            "replaced": "            }\n",
            "patch_type": "delete",
            "next_line_no": 655
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang.time.DateUtilsTest::testRoundLang346"
        ],
        "org.apache.commons.lang.time.DateUtilsTest::testRoundLang346": {
            "file_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
            "Instance": "Begin: Pos(705, 12)\nEnd: Pos(762, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_53/src/test//org/apache/commons/lang/time/DateUtilsTest.java\nName: testRoundLang346\nChilds: [StatementAssertion<Begin: Pos(712, 9), End: Pos(714, 61)>,\nStatementAssertion<Begin: Pos(718, 9), End: Pos(720, 61)>,\nStatementAssertion<Begin: Pos(726, 9), End: Pos(728, 61)>,\nStatementAssertion<Begin: Pos(733, 9), End: Pos(735, 61)>,\nStatementAssertion<Begin: Pos(740, 9), End: Pos(742, 61)>,\nStatementAssertion<Begin: Pos(747, 9), End: Pos(749, 61)>,\nStatementAssertion<Begin: Pos(753, 9), End: Pos(755, 59)>,\nStatementAssertion<Begin: Pos(759, 9), End: Pos(761, 59)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_53/src/test//org/apache/commons/lang/time/DateUtilsTest.java",
            "name": "testRoundLang346",
            "begin": "Pos(705, 12)",
            "end": "Pos(762, 5)",
            "begin_line_no": 705,
            "end_line_no": 762,
            "child": [
                "Begin: Pos(712, 9)\nEnd: Pos(714, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(718, 9)\nEnd: Pos(720, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(726, 9)\nEnd: Pos(728, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(733, 9)\nEnd: Pos(735, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(740, 9)\nEnd: Pos(742, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(747, 9)\nEnd: Pos(749, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(753, 9)\nEnd: Pos(755, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(759, 9)\nEnd: Pos(761, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testRoundLang346$catena_0() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRoundLang346$catena_1() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRoundLang346$catena_2() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRoundLang346$catena_3() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRoundLang346$catena_4() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRoundLang346$catena_5() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRoundLang346$catena_6() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRoundLang346$catena_7() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testRoundLang346$catena_0() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testRoundLang346$catena_1() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testRoundLang346$catena_2() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testRoundLang346$catena_3() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testRoundLang346$catena_4() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testRoundLang346$catena_5() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testRoundLang346$catena_6() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testRoundLang346$catena_7() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        try{ assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "0011": {
        "failing_tests": [
            "org.apache.commons.lang.time.DateUtilsTest::testRoundLang346$catena_0"
        ]
    },
    "1100": {
        "failing_tests": [
            "org.apache.commons.lang.time.DateUtilsTest::testRoundLang346$catena_2",
            "org.apache.commons.lang.time.DateUtilsTest::testRoundLang346$catena_4"
        ]
    }
}