---
Begin generate bug_id: Math_28
num_of_hunks: 4
use working dir: ./working/data/Math_28
Try to checkout Math_28
build dir: ['./working/data/Math_28/target/classes', './working/data/Math_28/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
trace file: src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
trace file: src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
trace file: src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
trying to replace old failing tests
edit: replace from 54 range 20 at src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
to
    @Test
    public void testMath828Cycle$catena_0() {
        LinearObjectiveFunction f = new LinearObjectiveFunction(
                new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);
        
        ArrayList <LinearConstraint>constraints = new ArrayList<LinearConstraint>();

        constraints.add(new LinearConstraint(new double[] {0.0, 16.0, 14.0, 69.0, 1.0, 85.0, 52.0, 43.0, 64.0, 97.0, 14.0, 74.0, 89.0, 28.0, 94.0, 58.0, 13.0, 22.0, 21.0, 17.0, 30.0, 25.0, 1.0, 59.0, 91.0, 78.0, 12.0, 74.0, 56.0, 3.0, 88.0,}, Relationship.GEQ, 91.0));
        constraints.add(new LinearConstraint(new double[] {0.0, 60.0, 40.0, 81.0, 71.0, 72.0, 46.0, 45.0, 38.0, 48.0, 40.0, 17.0, 33.0, 85.0, 64.0, 32.0, 84.0, 3.0, 54.0, 44.0, 71.0, 67.0, 90.0, 95.0, 54.0, 99.0, 99.0, 29.0, 52.0, 98.0, 9.0,}, Relationship.GEQ, 54.0));
        constraints.add(new LinearConstraint(new double[] {0.0, 41.0, 12.0, 86.0, 90.0, 61.0, 31.0, 41.0, 23.0, 89.0, 17.0, 74.0, 44.0, 27.0, 16.0, 47.0, 80.0, 32.0, 11.0, 56.0, 68.0, 82.0, 11.0, 62.0, 62.0, 53.0, 39.0, 16.0, 48.0, 1.0, 63.0,}, Relationship.GEQ, 62.0));
        constraints.add(new LinearConstraint(new double[] {83.0, -76.0, -94.0, -19.0, -15.0, -70.0, -72.0, -57.0, -63.0, -65.0, -22.0, -94.0, -22.0, -88.0, -86.0, -89.0, -72.0, -16.0, -80.0, -49.0, -70.0, -93.0, -95.0, -17.0, -83.0, -97.0, -31.0, -47.0, -31.0, -13.0, -23.0,}, Relationship.GEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] {41.0, -96.0, -41.0, -48.0, -70.0, -43.0, -43.0, -43.0, -97.0, -37.0, -85.0, -70.0, -45.0, -67.0, -87.0, -69.0, -94.0, -54.0, -54.0, -92.0, -79.0, -10.0, -35.0, -20.0, -41.0, -41.0, -65.0, -25.0, -12.0, -8.0, -46.0,}, Relationship.GEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] {27.0, -42.0, -65.0, -49.0, -53.0, -42.0, -17.0, -2.0, -61.0, -31.0, -76.0, -47.0, -8.0, -93.0, -86.0, -62.0, -65.0, -63.0, -22.0, -43.0, -27.0, -23.0, -32.0, -74.0, -27.0, -63.0, -47.0, -78.0, -29.0, -95.0, -73.0,}, Relationship.GEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] {15.0, -46.0, -41.0, -83.0, -98.0, -99.0, -21.0, -35.0, -7.0, -14.0, -80.0, -63.0, -18.0, -42.0, -5.0, -34.0, -56.0, -70.0, -16.0, -18.0, -74.0, -61.0, -47.0, -41.0, -15.0, -79.0, -18.0, -47.0, -88.0, -68.0, -55.0,}, Relationship.GEQ, 0.0));
        
        double epsilon = 1e-6;
        PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);
        Assert.assertEquals(1.0d, solution.getValue(), epsilon);                                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(validSolution(solution, constraints, epsilon));                      }catch(Throwable __SHOULD_BE_IGNORED){}        
    }     @Test
    public void testMath828Cycle$catena_1() {
        LinearObjectiveFunction f = new LinearObjectiveFunction(
                new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);
        
        ArrayList <LinearConstraint>constraints = new ArrayList<LinearConstraint>();

        constraints.add(new LinearConstraint(new double[] {0.0, 16.0, 14.0, 69.0, 1.0, 85.0, 52.0, 43.0, 64.0, 97.0, 14.0, 74.0, 89.0, 28.0, 94.0, 58.0, 13.0, 22.0, 21.0, 17.0, 30.0, 25.0, 1.0, 59.0, 91.0, 78.0, 12.0, 74.0, 56.0, 3.0, 88.0,}, Relationship.GEQ, 91.0));
        constraints.add(new LinearConstraint(new double[] {0.0, 60.0, 40.0, 81.0, 71.0, 72.0, 46.0, 45.0, 38.0, 48.0, 40.0, 17.0, 33.0, 85.0, 64.0, 32.0, 84.0, 3.0, 54.0, 44.0, 71.0, 67.0, 90.0, 95.0, 54.0, 99.0, 99.0, 29.0, 52.0, 98.0, 9.0,}, Relationship.GEQ, 54.0));
        constraints.add(new LinearConstraint(new double[] {0.0, 41.0, 12.0, 86.0, 90.0, 61.0, 31.0, 41.0, 23.0, 89.0, 17.0, 74.0, 44.0, 27.0, 16.0, 47.0, 80.0, 32.0, 11.0, 56.0, 68.0, 82.0, 11.0, 62.0, 62.0, 53.0, 39.0, 16.0, 48.0, 1.0, 63.0,}, Relationship.GEQ, 62.0));
        constraints.add(new LinearConstraint(new double[] {83.0, -76.0, -94.0, -19.0, -15.0, -70.0, -72.0, -57.0, -63.0, -65.0, -22.0, -94.0, -22.0, -88.0, -86.0, -89.0, -72.0, -16.0, -80.0, -49.0, -70.0, -93.0, -95.0, -17.0, -83.0, -97.0, -31.0, -47.0, -31.0, -13.0, -23.0,}, Relationship.GEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] {41.0, -96.0, -41.0, -48.0, -70.0, -43.0, -43.0, -43.0, -97.0, -37.0, -85.0, -70.0, -45.0, -67.0, -87.0, -69.0, -94.0, -54.0, -54.0, -92.0, -79.0, -10.0, -35.0, -20.0, -41.0, -41.0, -65.0, -25.0, -12.0, -8.0, -46.0,}, Relationship.GEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] {27.0, -42.0, -65.0, -49.0, -53.0, -42.0, -17.0, -2.0, -61.0, -31.0, -76.0, -47.0, -8.0, -93.0, -86.0, -62.0, -65.0, -63.0, -22.0, -43.0, -27.0, -23.0, -32.0, -74.0, -27.0, -63.0, -47.0, -78.0, -29.0, -95.0, -73.0,}, Relationship.GEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] {15.0, -46.0, -41.0, -83.0, -98.0, -99.0, -21.0, -35.0, -7.0, -14.0, -80.0, -63.0, -18.0, -42.0, -5.0, -34.0, -56.0, -70.0, -16.0, -18.0, -74.0, -61.0, -47.0, -41.0, -15.0, -79.0, -18.0, -47.0, -88.0, -68.0, -55.0,}, Relationship.GEQ, 0.0));
        
        double epsilon = 1e-6;
        PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);
        try{ Assert.assertEquals(1.0d, solution.getValue(), epsilon);                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(validSolution(solution, constraints, epsilon));                           /***** ORIGINAL ASSERTION IS HERE *****/        
    }
trace file: src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
new test num: 2
ori test num: 0
pattern: 0000
patches are written to file
running tests...
used time: Finished in 147.61 seconds
Failing tests: 2
	org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_0
	org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_1
pattern: 0001
try to fix hunk: 3
insert before 152 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 0010
try to fix hunk: 2
insert before 138 with             if (getIterations() < getMaxIterations() / 2) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 0100
try to fix hunk: 1
insert before 128 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1000
try to fix hunk: 0
insert before 119 with             if (tableau.getNumArtificialVariables() > 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 0011
try to fix hunk: 2
insert before 138 with             if (getIterations() < getMaxIterations() / 2) {

try to fix hunk: 3
insert before 152 with             }

patches are written to file
running tests...
used time: Finished in 123.83 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_1', 'org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_0']
select new bug
Pattern: 0011
failing tests: org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_1@org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_0
pattern: 0101
try to fix hunk: 1
insert before 128 with             }

try to fix hunk: 3
insert before 152 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 0110
try to fix hunk: 1
insert before 128 with             }

try to fix hunk: 2
insert before 138 with             if (getIterations() < getMaxIterations() / 2) {

patches are written to file
running tests...
used time: Finished in 138.01 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_1', 'org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_0']
select new bug
Pattern: 0110
failing tests: org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_1@org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_0
pattern: 1001
try to fix hunk: 0
insert before 119 with             if (tableau.getNumArtificialVariables() > 0) {

try to fix hunk: 3
insert before 152 with             }

patches are written to file
running tests...
used time: Finished in 140.61 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_1', 'org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_0']
select new bug
Pattern: 1001
failing tests: org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_1@org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_0
pattern: 1010
try to fix hunk: 0
insert before 119 with             if (tableau.getNumArtificialVariables() > 0) {

try to fix hunk: 2
insert before 138 with             if (getIterations() < getMaxIterations() / 2) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1100
try to fix hunk: 0
insert before 119 with             if (tableau.getNumArtificialVariables() > 0) {

try to fix hunk: 1
insert before 128 with             }

patches are written to file
running tests...
used time: Finished in 145.79 seconds
Failing tests: 2
	org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_0
	org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle$catena_1
Can independently fix []
Could not fix independently
pattern: 0111
try to fix hunk: 1
insert before 128 with             }

try to fix hunk: 2
insert before 138 with             if (getIterations() < getMaxIterations() / 2) {

try to fix hunk: 3
insert before 152 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1011
try to fix hunk: 0
insert before 119 with             if (tableau.getNumArtificialVariables() > 0) {

try to fix hunk: 2
insert before 138 with             if (getIterations() < getMaxIterations() / 2) {

try to fix hunk: 3
insert before 152 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1101
try to fix hunk: 0
insert before 119 with             if (tableau.getNumArtificialVariables() > 0) {

try to fix hunk: 1
insert before 128 with             }

try to fix hunk: 3
insert before 152 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1110
try to fix hunk: 0
insert before 119 with             if (tableau.getNumArtificialVariables() > 0) {

try to fix hunk: 1
insert before 128 with             }

try to fix hunk: 2
insert before 138 with             if (getIterations() < getMaxIterations() / 2) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1111
try to fix hunk: 0
insert before 119 with             if (tableau.getNumArtificialVariables() > 0) {

try to fix hunk: 1
insert before 128 with             }

try to fix hunk: 2
insert before 138 with             if (getIterations() < getMaxIterations() / 2) {

try to fix hunk: 3
insert before 152 with             }

patches are written to file
running tests...
used time: Finished in 133.83 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 3 new bugs
