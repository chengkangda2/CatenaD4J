{
    "num_of_hunks": 4,
    "0": {
        "file_name": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "replaced_with": "        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n",
        "patch_type": "insert",
        "next_line_no": 523
    },
    "1": {
        "file_name": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "replaced_with": "          if (maybeExpr.getFirstChild().getType() == Token.CALL) {\n            Node calledFn = maybeExpr.getFirstChild().getFirstChild();\n",
        "patch_type": "insert",
        "next_line_no": 529
    },
    "2": {
        "file_name": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "replaced_with": "            if (calledFn.getType() == Token.GETELEM) {\n              return false;\n            } else if (calledFn.getType() == Token.GETPROP &&\n                       calledFn.getLastChild().getString().startsWith(\"on\")) {\n              return false;\n            }\n          }\n",
        "patch_type": "insert",
        "next_line_no": 532
    },
    "3": {
        "file_name": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "from_line_no": 533,
        "to_line_no": 533,
        "replaced_with": "          return true;\n        }\n        return false;\n",
        "replaced": "          return NodeUtil.isExpressionNode(maybeExpr);\n",
        "patch_type": "replace",
        "next_line_no": 534
    }
}