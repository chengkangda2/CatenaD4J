{
    "num_of_hunks": 4,
    "0": {
        "file_name": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "from_line_no": 102,
        "to_line_no": 102,
        "replaced": "    boolean signatureAdded = false;\n",
        "patch_type": "delete",
        "next_line_no": 103
    },
    "1": {
        "file_name": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "from_line_no": 106,
        "to_line_no": 125,
        "replaced_with": "    } else {\n",
        "replaced": "      signatureAdded = true;\n    } else if (node.getType() == Token.NAME) {\n      String functionName = node.getString();\n      Scope.Var v = t.getScope().getVar(functionName);\n      if (v == null) {\n        if (compiler.isIdeMode()) {\n          return;\n        } else {\n          throw new IllegalStateException(\n              \"VarCheck should have caught this undefined function\");\n        }\n      }\n      Node function = v.getInitialValue();\n      if (function != null &&\n          function.getType() == Token.FUNCTION) {\n        addSignature(name, function, v.getInputName());\n        signatureAdded = true;\n      }\n    }\n    if (!signatureAdded) {\n",
        "patch_type": "replace",
        "next_line_no": 126
    },
    "2": {
        "file_name": "src/com/google/javascript/jscomp/RenameVars.java",
        "replaced_with": "        if (local) {\n",
        "patch_type": "insert",
        "next_line_no": 203
    },
    "3": {
        "file_name": "src/com/google/javascript/jscomp/RenameVars.java",
        "replaced_with": "          String newName =\n            MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(\n                name);\n          if (!newName.equals(name)) {\n            n.setString(newName);\n          }\n        }\n",
        "patch_type": "insert",
        "next_line_no": 204
    }
}