-------------
Chart_2
/root/workbench/d4j_buggy/Chart_2/tests//org/jfree/data/general/junit/DatasetUtilitiesTests.java
analyze: testBug2849731_2
add add to all_set
add addSeries to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.0, r.getLowerBound(), EPSILON);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.0, r.getUpperBound(), EPSILON);
add add to all_set
found unk statement expression at 1280
        r = DatasetUtilities.iterateDomainBounds(d);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.0, r.getLowerBound(), EPSILON);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getUpperBound(), EPSILON);
add add to all_set
found unk statement expression at 1285
        r = DatasetUtilities.iterateDomainBounds(d);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.5, r.getLowerBound(), EPSILON);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getUpperBound(), EPSILON);
analyze: testBug2849731_3
add add to all_set
add addSeries to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getLowerBound(), EPSILON);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getUpperBound(), EPSILON);
add add to all_set
found unk statement expression at 1303
        r = DatasetUtilities.iterateRangeBounds(d);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getLowerBound(), EPSILON);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2.5, r.getUpperBound(), EPSILON);
add add to all_set
found unk statement expression at 1308
        r = DatasetUtilities.iterateRangeBounds(d);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getLowerBound(), EPSILON);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3.5, r.getUpperBound(), EPSILON);
-------------
-------------
Chart_5
/root/workbench/d4j_buggy/Chart_5/tests//org/jfree/data/xy/junit/XYSeriesTests.java
analyze: testBug1955483
add addOrUpdate to all_set
add addOrUpdate to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Double(1.0), series.getY(0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Double(2.0), series.getY(1));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, series.getItemCount());
-------------
-------------
Chart_14
/root/workbench/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
analyze: testRemoveDomainMarker
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     	assertFalse(plot.removeDomainMarker(new CategoryMarker("Category 1")));
analyze: testRemoveRangeMarker
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     	assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));
/root/workbench/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/XYPlotTests.java
analyze: testRemoveDomainMarker
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     	assertFalse(plot.removeDomainMarker(new ValueMarker(0.5)));
analyze: testRemoveRangeMarker
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     	assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));
-------------
-------------
Chart_15
/root/workbench/d4j_buggy/Chart_15/tests//org/jfree/chart/plot/junit/PiePlot3DTests.java
analyze: testDrawWithNullDataset
get block code:
        try {
            BufferedImage image = new BufferedImage(200 , 100, 
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);
            g2.dispose();
            success = true;
        }
        catch (Exception e) {
            success = false;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(success);
-------------
-------------
Chart_16
/root/workbench/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
analyze: testCloning2
get block code:
        try {
            d2 = (DefaultIntervalCategoryDataset) d1.clone();
        }
        catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(d1 != d2);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(d1.getClass() == d2.getClass());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(d1.equals(d2));	
analyze: testGetSeriesIndex
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, empty.getSeriesIndex("ABC"));
analyze: testGetRowIndex
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, empty.getRowIndex("ABC"));
analyze: testGetCategoryIndex
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, empty.getCategoryIndex("ABC"));
analyze: testGetColumnIndex
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, empty.getColumnIndex("ABC"));
analyze: testSetCategoryKeys
get block code:
    	try {
    		empty.setCategoryKeys(new String[0]);
    	}
    	catch (RuntimeException e) {
    		pass = false;
    	}
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     	assertTrue(pass);
analyze: testGetColumnCount
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, empty.getColumnCount());
analyze: testGetRowCount
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, empty.getColumnCount());
-------------
-------------
Chart_18
/root/workbench/d4j_buggy/Chart_18/tests//org/jfree/data/category/junit/DefaultCategoryDatasetTests.java
analyze: testBug1835955
add addValue to all_set
add addValue to all_set
add removeColumn to all_set
add addValue to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(3.0, d.getValue("R2", "C2").doubleValue(), EPSILON);
/root/workbench/d4j_buggy/Chart_18/tests//org/jfree/data/junit/DefaultKeyedValues2DTests.java
analyze: testRemoveColumnByKey
add addValue to all_set
add addValue to all_set
add removeColumn to all_set
add addValue to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(3.0, d.getValue("R2", "C2").doubleValue(), EPSILON);
get block code:
    	try {
    		d.removeColumn("XXX");
    	}
    	catch (UnknownKeyException e) {
    		pass = true;
    	}
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     	assertTrue(pass);
/root/workbench/d4j_buggy/Chart_18/tests//org/jfree/data/junit/DefaultKeyedValuesTests.java
analyze: testGetIndex2
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, v.getIndex("K1"));
add addValue to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(0, v.getIndex("K1"));
add removeValue to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, v.getIndex("K1"));
analyze: testRemoveValue
add addValue to all_set
add addValue to all_set
add addValue to all_set
add addValue to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getIndex("B"));
add removeValue to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, data.getIndex("B"));
get block code:
        try {
            data.removeValue("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;   
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
-------------
-------------
Chart_19
/root/workbench/d4j_buggy/Chart_19/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
analyze: testGetDomainAxisIndex
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, plot.getDomainAxisIndex(domainAxis1));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));
add setDomainAxis to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, plot.getDomainAxisIndex(domainAxis2));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis("X2")));
get block code:
        try {
            plot.getDomainAxisIndex(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testGetRangeAxisIndex
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));
add setRangeAxis to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis("Y2")));
get block code:
        try {
            plot.getRangeAxisIndex(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
-------------
-------------
Chart_21
/root/workbench/d4j_buggy/Chart_21/tests//org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java
analyze: testGetRangeBounds
add add to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));
add add to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));
add add to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));
add add to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));
-------------
-------------
Chart_22
/root/workbench/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
analyze: testGetValueByKey
add addObject to all_set
add addObject to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj1", data.getObject("R1", "C1"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj2", data.getObject("R2", "C2"));
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(data.getObject("R1", "C2"));
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(data.getObject("R2", "C1"));
get block code:
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
found unk statement expression at 224
        pass = false;
get block code:
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
found unk statement expression at 233
        pass = false;
get block code:
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
found unk statement expression at 242
        pass = false;
get block code:
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testSetObject
add setObject to all_set
add setObject to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj1", data.getObject("R1", "C1"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj2", data.getObject("R2", "C2"));
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(data.getObject("R1", "C2"));
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(data.getObject("R2", "C1"));
add setObject to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("ABC", data.getObject("R2", "C2"));
get block code:
        try {
            data.setObject("X", null, "C1");
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
found unk statement expression at 278
        pass = false;
get block code:
        try {
            data.setObject("X", "R1", null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testRemoveColumnByIndex
add setObject to all_set
add setObject to all_set
add removeColumn to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getColumnCount());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj2", data.getObject(1, 0));
get block code:
        try {
            data.removeColumn(-1);
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
found unk statement expression at 342
        pass = false;
get block code:
        try {
            data.removeColumn(data.getColumnCount());
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testRemoveRowByKey
add setObject to all_set
add setObject to all_set
add removeRow to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getRowCount());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj1", data.getObject(0, 0));
get block code:
        try {
            data.removeRow("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
found unk statement expression at 374
        pass = false;
get block code:
        try {
            data.removeRow(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testRemoveColumnByKey
add setObject to all_set
add setObject to all_set
add removeColumn to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getColumnCount());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj1", data.getObject(0, 0));
get block code:
        try {
            data.removeColumn("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
found unk statement expression at 406
        pass = false;
get block code:
        try {
            data.removeColumn(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testRemoveValue
add setObject to all_set
add setObject to all_set
add removeObject to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getRowCount());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getColumnCount());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj1", data.getObject(0, 0));
-------------
-------------
Chart_25
/root/workbench/d4j_buggy/Chart_25/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
analyze: testDrawWithNullMeanVertical
get block code:
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(null, new Double(4.0), "S1", "C2");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis("Category"), new NumberAxis("Value"), 
                    new StatisticalBarRenderer());
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(success);
analyze: testDrawWithNullMeanHorizontal
get block code:
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(null, new Double(4.0), "S1", "C2");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis("Category"), new NumberAxis("Value"), 
                    new StatisticalBarRenderer());
            plot.setOrientation(PlotOrientation.HORIZONTAL);
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(success);
analyze: testDrawWithNullDeviationVertical
get block code:
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(new Double(4.0), null, "S1", "C2");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis("Category"), new NumberAxis("Value"), 
                    new StatisticalBarRenderer());
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(success);
analyze: testDrawWithNullDeviationHorizontal
get block code:
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(new Double(4.0), null, "S1", "C2");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis("Category"), new NumberAxis("Value"), 
                    new StatisticalBarRenderer());
            plot.setOrientation(PlotOrientation.HORIZONTAL);
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(success);
-------------
-------------
Lang_1
/root/workbench/d4j_buggy/Lang_1/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
analyze: TestLang747
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber("0x8000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber("0x80000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber("0x800000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber("0x8000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber("0x7FFFFFFF"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber("0x80000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber("0xFFFFFFFF"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber("0x08000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber("0x007FFFFFFF"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber("0x080000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber("0x00FFFFFFFF"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber("0x800000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber("0x8000000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber("0x80000000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber("0x800000000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber("0x8000000000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber("0x80000000000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber("0x800000000000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber("0x00080000000000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber("0x0800000000000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF"));
-------------
-------------
Lang_3
/root/workbench/d4j_buggy/Lang_3/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
analyze: testStringCreateNumberEnsureNoPrecisionLoss
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);
-------------
-------------
Lang_4
/root/workbench/d4j_buggy/Lang_4/src/test/java//org/apache/commons/lang3/text/translate/LookupTranslatorTest.java
analyze: testLang882
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Incorrect codepoint consumption", 3, result);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Incorrect value", "two", out.toString());
-------------
-------------
Lang_7
/root/workbench/d4j_buggy/Lang_7/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
analyze: testCreateNumber
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 1 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 2 failed", Integer.valueOf("12345"), NumberUtils.createNumber("12345"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5D"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5d"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5F"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5f"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 5 failed", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345L"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345l"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 7 failed", Float.valueOf("-1234.5"), NumberUtils.createNumber("-1234.5"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 8 failed", Integer.valueOf("-12345"), NumberUtils.createNumber("-12345"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 9a failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 9b failed", 0xFADE == NumberUtils.createNumber("0Xfade").intValue());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 10a failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 10b failed", -0xFADE == NumberUtils.createNumber("-0Xfade").intValue());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 11 failed", Double.valueOf("1.1E200"), NumberUtils.createNumber("1.1E200"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 12 failed", Float.valueOf("1.1E20"), NumberUtils.createNumber("1.1E20"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 13 failed", Double.valueOf("-1.1E200"), NumberUtils.createNumber("-1.1E200"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 14 failed", Double.valueOf("1.1E-200"), NumberUtils.createNumber("1.1E-200"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
            assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));
        }
is pure block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 16 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 17 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) LANG-521 failed", Float.valueOf("2."), NumberUtils.createNumber("2."));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) LANG-693 failed", Double.valueOf(Double.MAX_VALUE), NumberUtils
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(BigDecimal.class,bigNum.getClass());
add assertNotNull to all_set
found containsAssert getting True in analyze_invocation, add assertNotNull to pure_name_set
qualifier: 
code:         assertNotNull(bigNum);
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            NumberUtils.createNumber("--1.1E-700F");
            fail("Expected NumberFormatException");
        } catch (NumberFormatException nfe) {
is pure block
-------------
-------------
Lang_8
/root/workbench/d4j_buggy/Lang_8/src/test/java//org/apache/commons/lang3/time/FastDateFormat_PrinterTest.java
/root/workbench/d4j_buggy/Lang_8/src/test/java//org/apache/commons/lang3/time/FastDatePrinterTest.java
analyze: testCalendarTimezoneRespected
get block code:
        for (String zone : availableZones) {
            if (!zone.equals(currentZone.getID())) {
                anotherZone = TimeZone.getTimeZone(zone);
            }
is mess block
add assertNotNull to all_set
found containsAssert getting True in analyze_invocation, add assertNotNull to pure_name_set
qualifier: 
code:         assertNotNull("Cannot find another timezone", anotherZone);
add setTimeZone to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expectedValue, actualValue);
-------------
-------------
Lang_10
/root/workbench/d4j_buggy/Lang_10/src/test/java//org/apache/commons/lang3/time/FastDateFormat_ParserTest.java
/root/workbench/d4j_buggy/Lang_10/src/test/java//org/apache/commons/lang3/time/FastDateParserTest.java
analyze: testLANG_831
add testSdfAndFdp to all_set
found containsAssert getting True in analyze_invocation, add testSdfAndFdp to pure_name_set
qualifier: 
code:         testSdfAndFdp("M E","3  Tue", true);
-------------
-------------
Lang_12
/root/workbench/d4j_buggy/Lang_12/src/test/java//org/apache/commons/lang3/RandomStringUtilsTest.java
analyze: testLANG805
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("aaa", RandomStringUtils.random(3,0,0,false,false,new char[]{'a'},new Random(seed)));
analyze: testExceptions
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            RandomStringUtils.random(-1);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            RandomStringUtils.random(-1, true, true);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            RandomStringUtils.random(-1, DUMMY);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            RandomStringUtils.random(-1, "");
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            RandomStringUtils.random(-1, (String)null);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
-------------
-------------
Lang_13
/root/workbench/d4j_buggy/Lang_13/src/test/java//org/apache/commons/lang3/SerializationUtilsTest.java
analyze: testPrimitiveTypeClassSerialization
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        for (Class<?> primitiveType : primitiveTypes) {
            Class<?> clone = SerializationUtils.clone(primitiveType);
            assertEquals(primitiveType, clone);
        }
is pure block
-------------
-------------
Lang_15
/root/workbench/d4j_buggy/Lang_15/src/test/java//org/apache/commons/lang3/reflect/TypeUtilsTest.java
analyze: testIsAssignable
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 0, true);
found unk statement expression at 131
        list1 = list0;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 1, true);
found unk statement expression at 133
        list0 = list1;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 0, true);
found unk statement expression at 135
        list2 = list0;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 2, true);
found unk statement expression at 137
        list0 = list2;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 0, true);
found unk statement expression at 139
        list3 = list0;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 3, true);
found unk statement expression at 141
        list0 = list3;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 0, true);
found unk statement expression at 143
        list4 = list0;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 4, true);
found unk statement expression at 145
        list0 = list4;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 0, true);
found unk statement expression at 147
        list5 = list0;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 5, true);
found unk statement expression at 149
        list0 = list5;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 0, true);
found unk statement expression at 151
        list6 = list0;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 6, true);
found unk statement expression at 153
        list0 = list6;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 0, true);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 1, true);
found unk statement expression at 157
        list2 = list1;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 2, true);
found unk statement expression at 159
        list1 = (List<Object>) list2;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 1, false);
found unk statement expression at 161
        list3 = list1;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 3, true);
found unk statement expression at 163
        list1 = (List<Object>) list3;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 1, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 4, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 1, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 5, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 1, false);
found unk statement expression at 173
        list6 = list1;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 6, true);
found unk statement expression at 175
        list1 = (List<Object>) list6;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 1, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 2, true);
found unk statement expression at 179
        list2 = list3;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 3, false);
found unk statement expression at 181
        list2 = list4;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 2, true);
found unk statement expression at 183
        list3 = (List<? super Object>) list2;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 4, false);
found unk statement expression at 185
        list2 = list5;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 2, true);
found unk statement expression at 187
        list4 = (List<String>) list2;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 5, false);
found unk statement expression at 189
        list2 = list6;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 2, true);
found unk statement expression at 191
        list5 = (List<? extends String>) list2;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 6, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 2, true);
found unk statement expression at 195
        list6 = (List<? super String>) list2;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 3, true);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 4, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 3, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 5, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 3, false);
found unk statement expression at 205
        list6 = list3;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 6, true);
found unk statement expression at 207
        list3 = (List<? super Object>) list6;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 3, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 4, true);
found unk statement expression at 211
        list5 = list4;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 5, true);
found unk statement expression at 213
        list4 = (List<String>) list5;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 4, false);
found unk statement expression at 215
        list6 = list4;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 6, true);
found unk statement expression at 217
        list4 = (List<String>) list6;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 4, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 5, true);
found unk statement expression at 221
        list6 = (List<? super String>) list5;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 6, false);
found unk statement expression at 223
        list5 = (List<? extends String>) list6;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 5, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 6, true);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 7, true);
found unk statement expression at 230
        list8 = list7;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 8, true);
found unk statement expression at 232
        list7 = list8;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 7, true);
found unk statement expression at 234
        list9 = list7;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 9, true);
found unk statement expression at 236
        list7 = list9;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 7, true);
found unk statement expression at 238
        list10 = list7;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 10, true);
found unk statement expression at 240
        list7 = list10;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 7, true);
found unk statement expression at 242
        list11 = list7;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 11, true);
found unk statement expression at 244
        list7 = list11;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 7, true);
found unk statement expression at 246
        list12 = list7;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 12, true);
found unk statement expression at 248
        list7 = list12;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 7, true);
found unk statement expression at 250
        list13 = list7;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 13, true);
found unk statement expression at 252
        list7 = list13;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 7, true);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 8, true);
found unk statement expression at 256
        list9 = list8;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 9, true);
found unk statement expression at 258
        list8 = (List<Object>[]) list9;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 8, false);
found unk statement expression at 260
        list10 = list8;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 10, true);
found unk statement expression at 262
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 8, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 11, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 8, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 12, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 8, false);
found unk statement expression at 272
        list13 = list8;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 13, true);
found unk statement expression at 274
        list8 = (List<Object>[]) list13;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 8, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 9, true);
found unk statement expression at 278
        list10 = (List<? super Object>[]) list9;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 10, false);
found unk statement expression at 280
        list9 = list10;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 9, true);
found unk statement expression at 282
        list11 = (List<String>[]) list9;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 11, false);
found unk statement expression at 284
        list9 = list11;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 9, true);
found unk statement expression at 286
        list12 = (List<? extends String>[]) list9;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 12, false);
found unk statement expression at 288
        list9 = list12;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 9, true);
found unk statement expression at 290
        list13 = (List<? super String>[]) list9;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 13, false);
found unk statement expression at 292
        list9 = list13;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 9, true);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 10, true);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 11, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 10, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 12, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 10, false);
found unk statement expression at 304
        list13 = list10;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 13, true);
found unk statement expression at 306
        list10 = (List<? super Object>[]) list13;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 10, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 11, true);
found unk statement expression at 310
        list12 = list11;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 12, true);
found unk statement expression at 312
        list11 = (List<String>[]) list12;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 11, false);
found unk statement expression at 314
        list13 = list11;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 13, true);
found unk statement expression at 316
        list11 = (List<String>[]) list13;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 11, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 12, true);
found unk statement expression at 320
        list13 = (List<? super String>[]) list12;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 13, false);
found unk statement expression at 322
        list12 = (List<? extends String>[]) list13;
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 12, false);
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 13, true);
found unk statement expression at 337
        dis = dat;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
found unk statement expression at 341
        dis = uhder;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
found unk statement expression at 343
        dis = ding;
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
found unk statement expression at 346
        dis = tester;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
found unk statement expression at 364
        du = ch;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
found unk statement expression at 366
        du = by;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
found unk statement expression at 368
        du = sh;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
found unk statement expression at 370
        du = in;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
found unk statement expression at 372
        du = lo;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
found unk statement expression at 374
        du = fl;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
found unk statement expression at 376
        lo = in;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
found unk statement expression at 378
        lo = Integer.valueOf(0);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
found unk statement expression at 384
        in = Integer.valueOf(0);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
found unk statement expression at 391
        intComparable = 1;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
found unk statement expression at 406
        intWildcardComparable = ia;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
found unk statement expression at 414
        oa = new Integer[0];
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
found unk statement expression at 422
        aClass.bClass = aClass.cClass;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
found unk statement expression at 424
        aClass.bClass = aClass.dClass;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
found unk statement expression at 426
        aClass.bClass = aClass.eClass;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
found unk statement expression at 428
        aClass.bClass = aClass.fClass;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
found unk statement expression at 430
        aClass.cClass = aClass.dClass;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
found unk statement expression at 432
        aClass.cClass = aClass.eClass;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
found unk statement expression at 434
        aClass.cClass = aClass.fClass;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
found unk statement expression at 436
        aClass.dClass = aClass.eClass;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
found unk statement expression at 438
        aClass.dClass = aClass.fClass;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
found unk statement expression at 440
        aClass.eClass = aClass.fClass;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
analyze: testGetTypeArguments
found unk statement expression at 477
        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
found unk statement expression at 478
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
found unk statement expression at 481
        typeArg = typeVarAssigns.get(treeSetTypeVar);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
found unk statement expression at 485
        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
found unk statement expression at 486
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
found unk statement expression at 489
        typeArg = typeVarAssigns.get(treeSetTypeVar);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
found unk statement expression at 494
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
found unk statement expression at 495
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
found unk statement expression at 499
        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(typeVarAssigns.size() == 2);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));
found unk statement expression at 504
        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(2, typeVarAssigns.size());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));
-------------
-------------
Lang_17
/root/workbench/d4j_buggy/Lang_17/src/test/java//org/apache/commons/lang3/StringEscapeUtilsTest.java
analyze: testLang720
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(input, escaped);
-------------
-------------
Lang_18
/root/workbench/d4j_buggy/Lang_18/src/test/java//org/apache/commons/lang3/time/FastDateFormatTest.java
analyze: testFormat
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            assertEquals(sdf.format(date1), fdf.format(date1));
            assertEquals("2003-01-10T15:33:20", fdf.format(date1));
            assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
            assertEquals("2003-01-10T15:33:20", fdf.format(millis1));
            assertEquals("2003-07-10T09:00:00", fdf.format(date2));
            assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
            assertEquals("2003-07-10T09:00:00", fdf.format(millis2));

            fdf = FastDateFormat.getInstance("Z");
            assertEquals("-0500", fdf.format(date1));
            assertEquals("-0500", fdf.format(cal1));
            assertEquals("-0500", fdf.format(millis1));

            assertEquals("-0400", fdf.format(date2));
            assertEquals("-0400", fdf.format(cal2));
            assertEquals("-0400", fdf.format(millis2));

            fdf = FastDateFormat.getInstance("ZZ");
            assertEquals("-05:00", fdf.format(date1));
            assertEquals("-05:00", fdf.format(cal1));
            assertEquals("-05:00", fdf.format(millis1));

            assertEquals("-04:00", fdf.format(date2));
            assertEquals("-04:00", fdf.format(cal2));
            assertEquals("-04:00", fdf.format(millis2));

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));
            assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
is pure block
-------------
-------------
Lang_19
/root/workbench/d4j_buggy/Lang_19/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
analyze: testOutOfBounds
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X"));
analyze: testUnfinishedEntity
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Failed to support unfinished entities (i.e. missing semi-colon", expected, result);
-------------
-------------
Lang_20
/root/workbench/d4j_buggy/Lang_20/src/test/java//org/apache/commons/lang3/StringUtilsTest.java
analyze: testJoin_Objectarray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join()); // empty array
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join((Object) null)); // => new Object[]{null}
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join(NULL_ARRAY_LIST));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));
analyze: testJoin_ArrayChar
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, StringUtils.join((Object[]) null, ','));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));
-------------
-------------
Lang_23
/root/workbench/d4j_buggy/Lang_23/src/test/java//org/apache/commons/lang3/text/ExtendedMessageFormatTest.java
analyze: testEqualsHashcode
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("same, equals()",   emf.equals(emf));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode());
found unk statement expression at 284
        other = new ExtendedMessageFormat(pattern, Locale.US, registry);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("equal, equals()",   emf.equals(other));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode());
found unk statement expression at 289
        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("class, equals()",  emf.equals(other));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); // same hashcode
found unk statement expression at 294
        other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("pattern, equals()",   emf.equals(other));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode());
found unk statement expression at 299
        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("registry, equals()",   emf.equals(other));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode());
found unk statement expression at 304
        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("locale, equals()",  emf.equals(other));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); // same hashcode
-------------
-------------
Lang_27
/root/workbench/d4j_buggy/Lang_27/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
analyze: testCreateNumber
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));
        }
is pure block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));
-------------
-------------
Lang_30
/root/workbench/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
analyze: testContainsAny_StringCharArrayWithBadSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));
analyze: testContainsAny_StringWithBadSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));
analyze: testContainsNone_CharArrayWithBadSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));
analyze: testContainsNone_CharArrayWithSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20000.indexOf(CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));
analyze: testContainsNone_StringWithBadSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));        
analyze: testContainsNone_StringWithSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20000.indexOf(CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));
analyze: testIndexOfAny_StringCharArrayWithSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));    
analyze: testIndexOfAny_StringStringWithSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));    
analyze: testIndexOfAnyBut_StringCharArrayWithSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));        
analyze: testIndexOfAnyBut_StringStringWithSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));        
-------------
-------------
Lang_31
/root/workbench/d4j_buggy/Lang_31/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
analyze: testContainsAnyStringWithSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(-1, CharU20000.indexOf(CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));
analyze: testContainsAnyCharArrayWithSupplementaryChars
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(-1, CharU20000.indexOf(CharU20001));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));
-------------
-------------
Lang_32
/root/workbench/d4j_buggy/Lang_32/src/test/java//org/apache/commons/lang3/builder/HashCodeBuilderTest.java
analyze: testReflectionObjectCycle
found unk statement expression at 503
        a.b = b;
found unk statement expression at 504
        b.a = a;
add hashCode to all_set
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(HashCodeBuilder.getRegistry());
add hashCode to all_set
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(HashCodeBuilder.getRegistry());
-------------
-------------
Lang_34
/root/workbench/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
analyze: testReflectionObjectArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 148
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 150
        this.validateNullToStringStyleRegistry();
analyze: testReflectionLongArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 157
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 159
        this.validateNullToStringStyleRegistry();
analyze: testReflectionIntArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 166
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 168
        this.validateNullToStringStyleRegistry();
analyze: testReflectionShortArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 175
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 177
        this.validateNullToStringStyleRegistry();
analyze: testReflectionyteArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 184
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 186
        this.validateNullToStringStyleRegistry();
analyze: testReflectionCharArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 193
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 195
        this.validateNullToStringStyleRegistry();
analyze: testReflectionDoubleArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 202
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 204
        this.validateNullToStringStyleRegistry();
analyze: testReflectionFloatArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 211
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 213
        this.validateNullToStringStyleRegistry();
analyze: testReflectionBooleanArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 220
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 222
        this.validateNullToStringStyleRegistry();
analyze: testReflectionFloatArrayArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 231
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 233
        this.validateNullToStringStyleRegistry();
analyze: testReflectionLongArrayArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 241
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 243
        this.validateNullToStringStyleRegistry();
analyze: testReflectionIntArrayArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 250
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 252
        this.validateNullToStringStyleRegistry();
analyze: testReflectionhortArrayArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 259
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 261
        this.validateNullToStringStyleRegistry();
analyze: testReflectionByteArrayArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 268
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 270
        this.validateNullToStringStyleRegistry();
analyze: testReflectionCharArrayArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 277
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 279
        this.validateNullToStringStyleRegistry();
analyze: testReflectionDoubleArrayArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 286
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 288
        this.validateNullToStringStyleRegistry();
analyze: testReflectionBooleanArrayArray
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
found unk statement expression at 296
        array = null;
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
found unk statement expression at 298
        this.validateNullToStringStyleRegistry();
analyze: testReflectionHierarchy
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));
found unk statement expression at 325
        baseStr = this.toBaseString(baseB);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));
found unk statement expression at 335
        this.validateNullToStringStyleRegistry();
analyze: testReflectionArrayCycle
found unk statement expression at 378
        objects[0] = objects;
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
found unk statement expression at 382
        this.validateNullToStringStyleRegistry();
analyze: testReflectionArrayCycleLevel2
found unk statement expression at 391
        objects[0] = objectsLevel2;
found unk statement expression at 392
        objectsLevel2[0] = objects;
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
found unk statement expression at 399
        this.validateNullToStringStyleRegistry();
analyze: testReflectionArrayArrayCycle
found unk statement expression at 404
        objects[0][0] = objects;
found unk statement expression at 405
        objects[0][1] = objects;
found unk statement expression at 406
        objects[1][0] = objects;
found unk statement expression at 407
        objects[1][1] = objects;
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
found unk statement expression at 421
        this.validateNullToStringStyleRegistry();
analyze: testSimpleReflectionObjectCycle
found unk statement expression at 508
        simple.o = simple;
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString());
found unk statement expression at 510
        this.validateNullToStringStyleRegistry();
analyze: testSelfInstanceVarReflectionObjectCycle
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + "]", test.toString());
found unk statement expression at 521
        this.validateNullToStringStyleRegistry();
analyze: testSelfInstanceTwoVarsReflectionObjectCycle
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString());
found unk statement expression at 533
        this.validateNullToStringStyleRegistry();
analyze: testReflectionObjectCycle
found unk statement expression at 545
        a.b = b;
found unk statement expression at 546
        b.a = a;
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
found unk statement expression at 550
        this.validateNullToStringStyleRegistry();
analyze: testReflectionArrayAndObjectCycle
found unk statement expression at 562
        objects[0] = simple;
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
found unk statement expression at 578
        this.validateNullToStringStyleRegistry();
analyze: testObjectCycle
found unk statement expression at 832
        a.obj = b;
found unk statement expression at 833
        b.obj = a;
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, a.toString());
add validateNullToStringStyleRegistry to all_set
found containsAssert getting True in method recursive, add assertNull to pure_name_set
found containsAssert getting True in analyze_invocation, add validateNullToStringStyleRegistry to pure_name_set
qualifier: 
code:         validateNullToStringStyleRegistry();
-------------
-------------
Lang_35
/root/workbench/d4j_buggy/Lang_35/src/test/java//org/apache/commons/lang3/ArrayUtilsAddTest.java
analyze: testLANG571
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            @SuppressWarnings("unused")
            String[] sa = ArrayUtils.add(stringArray, aString);
            fail("Should have caused IllegalArgumentException");
        } catch (IllegalArgumentException iae){
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            @SuppressWarnings("unused")
            String[] sa = ArrayUtils.add(stringArray, 0, aString);
            fail("Should have caused IllegalArgumentException");
        } catch (IllegalArgumentException iae){
is pure block
-------------
-------------
Lang_36
/root/workbench/d4j_buggy/Lang_36/src/test//org/apache/commons/lang3/math/NumberUtilsTest.java
analyze: testCreateNumber
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));
        }
is pure block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));
analyze: testIsNumber
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));
found unk statement expression at 1006
        val = "1234.5";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));
found unk statement expression at 1009
        val = ".12345";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));
found unk statement expression at 1012
        val = "1234E5";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));
found unk statement expression at 1015
        val = "1234E+5";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));
found unk statement expression at 1018
        val = "1234E-5";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));
found unk statement expression at 1021
        val = "123.4E5";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));
found unk statement expression at 1024
        val = "-1234";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));
found unk statement expression at 1027
        val = "-1234.5";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));
found unk statement expression at 1030
        val = "-.12345";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));
found unk statement expression at 1033
        val = "-1234E5";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));
found unk statement expression at 1036
        val = "0";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));
found unk statement expression at 1039
        val = "-0";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));
found unk statement expression at 1042
        val = "01234";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));
found unk statement expression at 1045
        val = "-01234";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));
found unk statement expression at 1048
        val = "0xABC123";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));
found unk statement expression at 1051
        val = "0x0";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));
found unk statement expression at 1054
        val = "123.4E21D";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));
found unk statement expression at 1057
        val = "-221.23F";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));
found unk statement expression at 1060
        val = "22338L";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));
found unk statement expression at 1063
        val = null;
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1066
        val = "";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1069
        val = "--2.3";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1072
        val = ".12.3";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1075
        val = "-123E";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1078
        val = "-123E+-212";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1081
        val = "-123E2.12";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1084
        val = "0xGF";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1087
        val = "0xFAE-1";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1090
        val = ".";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1093
        val = "-0ABC123";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1096
        val = "123.4E-D";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1099
        val = "123.4ED";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1102
        val = "1234E5l";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1105
        val = "11a";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); 
found unk statement expression at 1108
        val = "1a";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); 
found unk statement expression at 1111
        val = "a";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); 
found unk statement expression at 1114
        val = "11g";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); 
found unk statement expression at 1117
        val = "11z";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); 
found unk statement expression at 1120
        val = "11def";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); 
found unk statement expression at 1123
        val = "11d11";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); 
found unk statement expression at 1126
        val = "11 11";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1129
        val = " 1111";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1132
        val = "1111 ";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));
found unk statement expression at 1137
        val = "2.";
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));
-------------
-------------
Lang_41
/root/workbench/d4j_buggy/Lang_41/src/test//org/apache/commons/lang/ClassUtilsTest.java
analyze: test_getShortClassName_Class
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getShortClassName((Class) null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("String[]", ClassUtils.getShortClassName(String[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("byte", ClassUtils.getShortClassName(byte.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("char", ClassUtils.getShortClassName(char.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("short", ClassUtils.getShortClassName(short.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("int", ClassUtils.getShortClassName(int.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("long", ClassUtils.getShortClassName(long.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("float", ClassUtils.getShortClassName(float.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("double", ClassUtils.getShortClassName(double.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("char[]", ClassUtils.getShortClassName(char[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("short[]", ClassUtils.getShortClassName(short[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("int[]", ClassUtils.getShortClassName(int[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("long[]", ClassUtils.getShortClassName(long[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("float[]", ClassUtils.getShortClassName(float[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("double[]", ClassUtils.getShortClassName(double[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));
analyze: test_getPackageName_Class
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.lang", ClassUtils.getPackageName(String.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName((Class)null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.lang", ClassUtils.getPackageName(String[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(boolean[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(byte[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(char[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(short[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(int[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(long[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(float[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(double[].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));
-------------
-------------
Lang_42
/root/workbench/d4j_buggy/Lang_42/src/test//org/apache/commons/lang/StringEscapeUtilsTest.java
analyze: testEscapeHtmlHighUnicode
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "High unicode was not escaped correctly", "&#119650;", escaped);
-------------
-------------
Lang_46
/root/workbench/d4j_buggy/Lang_46/src/test//org/apache/commons/lang/StringEscapeUtilsTest.java
analyze: testEscapeJavaWithSlash
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, actual);
-------------
-------------
Lang_47
/root/workbench/d4j_buggy/Lang_47/src/test//org/apache/commons/lang/text/StrBuilderTest.java
analyze: testLang412Right
add appendFixedWidthPadRight to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString());
analyze: testLang412Left
add appendFixedWidthPadLeft to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "Failed to invoke appendFixedWidthPadLeft correctly", "**********", sb.toString());
-------------
-------------
Lang_50
/root/workbench/d4j_buggy/Lang_50/src/test//org/apache/commons/lang/time/FastDateFormatTest.java
analyze: test_changeDefault_Locale_DateInstance
found containsAssert getting True in tryBlock, add assertSame to pure_name_set
found containsAssert getting True in tryBlock, add assertSame to pure_name_set
found containsAssert getting True in tryBlock, add assertSame to pure_name_set
found containsAssert getting True in tryBlock, add assertTrue to pure_name_set
found containsAssert getting True in tryBlock, add assertTrue to pure_name_set
get block code:
        try {
            Locale.setDefault(Locale.US);
            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);
            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
            Locale.setDefault(Locale.GERMANY);
            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);

            assertSame(Locale.GERMANY, format1.getLocale());
            assertSame(Locale.US, format2.getLocale());
            assertSame(Locale.GERMANY, format3.getLocale());
            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
            assertTrue(format2 != format3);

        } finally {
            Locale.setDefault(realDefaultLocale);
        }
is pure block
analyze: test_changeDefault_Locale_DateTimeInstance
found containsAssert getting True in tryBlock, add assertSame to pure_name_set
found containsAssert getting True in tryBlock, add assertSame to pure_name_set
found containsAssert getting True in tryBlock, add assertSame to pure_name_set
found containsAssert getting True in tryBlock, add assertTrue to pure_name_set
found containsAssert getting True in tryBlock, add assertTrue to pure_name_set
get block code:
        try {
            Locale.setDefault(Locale.US);
            FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);
            FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
            Locale.setDefault(Locale.GERMANY);
            FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);

            assertSame(Locale.GERMANY, format1.getLocale());
            assertSame(Locale.US, format2.getLocale());
            assertSame(Locale.GERMANY, format3.getLocale());
            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
            assertTrue(format2 != format3);

        } finally {
            Locale.setDefault(realDefaultLocale);
        }
is pure block
-------------
-------------
Lang_53
/root/workbench/d4j_buggy/Lang_53/src/test//org/apache/commons/lang/time/DateUtilsTest.java
analyze: testRoundLang346
add setDefault to all_set
add setTimeZone to all_set
add set to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Minute Round Up Failed",
add set to all_set
found unk statement expression at 717
        date = testCalendar.getTime();
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Minute No Round Failed",
add set to all_set
add set to all_set
found unk statement expression at 724
        date = testCalendar.getTime();
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Second Round Up with 600 Milli Seconds Failed",
add set to all_set
add set to all_set
found unk statement expression at 732
        date = testCalendar.getTime();
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Second Round Down with 200 Milli Seconds Failed",
add set to all_set
add set to all_set
found unk statement expression at 739
        date = testCalendar.getTime();
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Second Round Up with 200 Milli Seconds Failed",
add set to all_set
add set to all_set
found unk statement expression at 746
        date = testCalendar.getTime();
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Second Round Down with 200 Milli Seconds Failed",
add set to all_set
found unk statement expression at 752
        date = testCalendar.getTime();
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Hour Round Down Failed",
add set to all_set
found unk statement expression at 758
        date = testCalendar.getTime();
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Hour Round Up Failed",
-------------
-------------
Lang_56
/root/workbench/d4j_buggy/Lang_56/src/test//org/apache/commons/lang/time/FastDateFormatTest.java
analyze: testLang303
found unk statement expression at 288
        format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );
-------------
-------------
Lang_58
/root/workbench/d4j_buggy/Lang_58/src/test//org/apache/commons/lang/math/NumberUtilsTest.java
analyze: testLang300
add createNumber to all_set
add createNumber to all_set
add createNumber to all_set
-------------
-------------
Lang_60
/root/workbench/d4j_buggy/Lang_60/src/test//org/apache/commons/lang/text/StrBuilderTest.java
analyze: testLang295
add deleteFirst to all_set
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse( "The contains(char) method is looking beyond the end of the string", sb.contains('h'));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "The indexOf(char) method is looking beyond the end of the string", -1, sb.indexOf('h'));
-------------
-------------
Lang_62
/root/workbench/d4j_buggy/Lang_62/src/test//org/apache/commons/lang/EntitiesTest.java
analyze: testNumberOverflow
add doTestUnescapeEntity to all_set
found containsAssert getting True in analyze_invocation, add doTestUnescapeEntity to pure_name_set
qualifier: 
code:         doTestUnescapeEntity("&#12345678;", "&#12345678;");
add doTestUnescapeEntity to all_set
found containsAssert getting True in analyze_invocation, add doTestUnescapeEntity to pure_name_set
qualifier: 
code:         doTestUnescapeEntity("x&#12345678;y", "x&#12345678;y");
add doTestUnescapeEntity to all_set
found containsAssert getting True in analyze_invocation, add doTestUnescapeEntity to pure_name_set
qualifier: 
code:         doTestUnescapeEntity("&#x12345678;", "&#x12345678;");
add doTestUnescapeEntity to all_set
found containsAssert getting True in analyze_invocation, add doTestUnescapeEntity to pure_name_set
qualifier: 
code:         doTestUnescapeEntity("x&#x12345678;y", "x&#x12345678;y");
-------------
-------------
Lang_63
/root/workbench/d4j_buggy/Lang_63/src/test//org/apache/commons/lang/time/DurationFormatUtilsTest.java
analyze: testJiraLang281
add set to all_set
add set to all_set
add set to all_set
add set to all_set
add set to all_set
add set to all_set
add set to all_set
add set to all_set
add set to all_set
add set to all_set
add set to all_set
add set to all_set
add set to all_set
add set to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("09", result);
-------------
-------------
Lang_64
/root/workbench/d4j_buggy/Lang_64/src/test//org/apache/commons/lang/enums/ValuedEnumTest.java
analyze: testCompareTo_otherEnumType
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            ValuedColorEnum.BLUE.compareTo(ValuedLanguageEnum.ENGLISH);
            fail();
        } catch (ClassCastException ex) {
is pure block
-------------
-------------
Lang_65
/root/workbench/d4j_buggy/Lang_65/src/test//org/apache/commons/lang/time/DateUtilsTest.java
analyze: testTruncateLang59
add setDefault to all_set
add setTimeZone to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));
add setTime to all_set
add set to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.MILLISECOND",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.SECOND",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.MINUTE",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.HOUR_OF_DAY",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.HOUR",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.DATE",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.MILLISECOND",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.SECOND",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.MINUTE",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.HOUR_OF_DAY",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.HOUR",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.DATE",
add setDefault to all_set
-------------
-------------
Math_1
/root/workbench/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/BigFractionTest.java
analyze: testDigitLimitConstructor
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new BigFraction(0.4, 9));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new BigFraction(0.4, 99));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new BigFraction(0.4, 999));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(3, 5, new BigFraction(0.6152, 9));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(8, 13, new BigFraction(0.6152, 99));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(510, 829, new BigFraction(0.6152, 999));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(769, 1250, new BigFraction(0.6152, 9999));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(1, 2, new BigFraction(0.5000000001, 10));
/root/workbench/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/FractionTest.java
analyze: testDigitLimitConstructor
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new Fraction(0.4,   9));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new Fraction(0.4,  99));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new Fraction(0.4, 999));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(3, 5,      new Fraction(0.6152,    9));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(8, 13,     new Fraction(0.6152,   99));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(510, 829,  new Fraction(0.6152,  999));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(769, 1250, new Fraction(0.6152, 9999));
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(1, 2, new Fraction(0.5000000001, 10));
-------------
-------------
Math_4
/root/workbench/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java
analyze: testIntersectionNotIntersecting
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to mess_name_set
qualifier: Assert
code:         Assert.assertNull(sub1.intersection(sub2, true));
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to mess_name_set
qualifier: Assert
code:         Assert.assertNull(sub1.intersection(sub2, false));
/root/workbench/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java
analyze: testIntersectionParallel
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to mess_name_set
qualifier: Assert
code:         Assert.assertNull(sub1.intersection(sub2, true));
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to mess_name_set
qualifier: Assert
code:         Assert.assertNull(sub1.intersection(sub2, false));
-------------
-------------
Math_6
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
analyze: testTrivial
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
analyze: testRosen
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rosen(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rosen(), startPoint, insigma, boundaries,
analyze: testMaximize
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new MinusElli(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new MinusElli(), startPoint, insigma, boundaries,
found unk statement expression at 154
        boundaries = boundaries(DIM,-0.3,0.3); 
found unk statement expression at 155
        startPoint = point(DIM,0.1);
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new MinusElli(), startPoint, insigma, boundaries,
analyze: testEllipse
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Elli(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Elli(), startPoint, insigma, boundaries,
analyze: testElliRotated
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new ElliRotated(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new ElliRotated(), startPoint, insigma, boundaries,
analyze: testCigar
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Cigar(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Cigar(), startPoint, insigma, boundaries,
analyze: testCigarWithBoundaries
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Cigar(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Cigar(), startPoint, insigma, boundaries,
analyze: testTwoAxes
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new TwoAxes(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new TwoAxes(), startPoint, insigma, boundaries,
analyze: testCigTab
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new CigTab(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new CigTab(), startPoint, insigma, boundaries,
analyze: testSphere
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Sphere(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Sphere(), startPoint, insigma, boundaries,
analyze: testTablet
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Tablet(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Tablet(), startPoint, insigma, boundaries,
analyze: testDiffPow
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new DiffPow(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new DiffPow(), startPoint, insigma, boundaries,
analyze: testSsDiffPow
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new SsDiffPow(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new SsDiffPow(), startPoint, insigma, boundaries,
analyze: testAckley
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Ackley(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Ackley(), startPoint, insigma, boundaries,
analyze: testRastrigin
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rastrigin(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rastrigin(), startPoint, insigma, boundaries,
analyze: testConstrainedRosen
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rosen(), startPoint, insigma, boundaries,
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rosen(), startPoint, insigma, boundaries,
analyze: testDiagonalRosen
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rosen(), startPoint, insigma, boundaries,
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
analyze: testSumSinc
get block code:
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 0;
        }
is mess block
get block code:
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i];
        }
is mess block
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);
get block code:
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] + 3;
        }
is mess block
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
analyze: testMinimize1
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 120);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 150);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMinimize2
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 120);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 150);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMaximize1
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 120);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 150);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMaximize2
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 180);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 220);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
analyze: testMinimize1
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 60);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 90);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMinimize2
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 60);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 90);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMaximize1
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 60);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 90);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMaximize2
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 60);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 90);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java
-------------
-------------
Math_7
/root/workbench/d4j_buggy/Math_7/src/test/java//org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java
analyze: testEventsScheduling
add addEventHandler to all_set
add addStepHandler to all_set
add addEventHandler to all_set
add addStepHandler to all_set
add integrate to all_set
-------------
-------------
Math_8
/root/workbench/d4j_buggy/Math_8/src/test/java//org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java
analyze: testIssue942
add add to all_set
add add to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);
-------------
-------------
Math_12
/root/workbench/d4j_buggy/Math_12/src/test/java//org/apache/commons/math3/distribution/GammaDistributionTest.java
/root/workbench/d4j_buggy/Math_12/src/test/java//org/apache/commons/math3/distribution/LogNormalDistributionTest.java
/root/workbench/d4j_buggy/Math_12/src/test/java//org/apache/commons/math3/distribution/NormalDistributionTest.java
-------------
-------------
Math_14
/root/workbench/d4j_buggy/Math_14/src/test/java//org/apache/commons/math3/fitting/PolynomialFitterTest.java
analyze: testLargeSample
found containsAssert getting True in tryBlock, add assertTrue to mess_name_set
get block code:
        for (int degree = 0; degree < 10; ++degree) {
            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);

            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
            for (int i = 0; i < 40000; ++i) {
                double x = -1.0 + i / 20000.0;
                fitter.addObservedPoint(1.0, x,
                                        p.value(x) + 0.1 * randomizer.nextGaussian());
            }

            final double[] init = new double[degree + 1];
            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));

            for (double x = -1.0; x < 1.0; x += 0.01) {
                double error = FastMath.abs(p.value(x) - fitted.value(x)) /
                              (1.0 + FastMath.abs(p.value(x)));
                maxError = FastMath.max(maxError, error);
                Assert.assertTrue(FastMath.abs(error) < 0.01);
            }
is pure block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(maxError > 0.001);
-------------
-------------
Math_15
/root/workbench/d4j_buggy/Math_15/src/test/java//org/apache/commons/math3/util/FastMathTest.java
analyze: testMath904
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(Math.pow(x, y),
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(Math.pow(x, -y),
-------------
-------------
Math_16
/root/workbench/d4j_buggy/Math_16/src/test/java//org/apache/commons/math3/util/FastMathTest.java
analyze: testMath905LargePositive
get block code:
        for (double x = start; x < end; x += 1e-3) {
            final double tst = FastMath.cosh(x);
            final double ref = Math.cosh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
is mess block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0, maxErr, 3);
get block code:
        for (double x = start; x < end; x += 1e-3) {
            final double tst = FastMath.sinh(x);
            final double ref = Math.sinh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
is mess block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0, maxErr, 3);
analyze: testMath905LargeNegative
get block code:
        for (double x = start; x > end; x -= 1e-3) {
            final double tst = FastMath.cosh(x);
            final double ref = Math.cosh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
is mess block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0, maxErr, 3);
get block code:
        for (double x = start; x > end; x -= 1e-3) {
            final double tst = FastMath.sinh(x);
            final double ref = Math.sinh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
is mess block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0, maxErr, 3);
-------------
-------------
Math_18
/root/workbench/d4j_buggy/Math_18/src/test/java//org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
analyze: testFitAccuracyDependsOnBoundary
found unk statement expression at 459
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
found unk statement expression at 464
        lower[0] = -5e16;
found unk statement expression at 465
        upper[0] = 20;
found unk statement expression at 466
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(resNoBound, resNearLo, 1e-3);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(resNoBound, resNearHi, 1e-3);
-------------
-------------
Math_21
/root/workbench/d4j_buggy/Math_21/src/test/java//org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java
analyze: testFullRank
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(root.subtract(base).getNorm() > 0.3);
analyze: testMath789
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);
-------------
-------------
Math_22
/root/workbench/d4j_buggy/Math_22/src/test/java//org/apache/commons/math3/distribution/FDistributionTest.java
/root/workbench/d4j_buggy/Math_22/src/test/java//org/apache/commons/math3/distribution/UniformRealDistributionTest.java
-------------
-------------
Math_23
/root/workbench/d4j_buggy/Math_23/src/test/java//org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
analyze: testKeepInitIfBest
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue("Best point not reported", f.value(sol) <= f.value(expected));
-------------
-------------
Math_24
/root/workbench/d4j_buggy/Math_24/src/test/java//org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
analyze: testMath855
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue("Best point not reported", f.value(sol) <= f.value(expected));
-------------
-------------
Math_26
/root/workbench/d4j_buggy/Math_26/src/test/java//org/apache/commons/math3/fraction/FractionTest.java
analyze: testIntegerOverflow
add checkIntegerOverflow to all_set
found containsAssert getting True in block recursive, add fail to mess_name_set
found containsAssert getting True in analyze_invocation, add checkIntegerOverflow to pure_name_set
qualifier: 
code:         checkIntegerOverflow(0.75000000001455192);
add checkIntegerOverflow to all_set
found containsAssert getting True in analyze_invocation, add checkIntegerOverflow to pure_name_set
qualifier: 
code:         checkIntegerOverflow(1.0e10);
add checkIntegerOverflow to all_set
found containsAssert getting True in analyze_invocation, add checkIntegerOverflow to pure_name_set
qualifier: 
code:         checkIntegerOverflow(-1.0e10);
add checkIntegerOverflow to all_set
found containsAssert getting True in analyze_invocation, add checkIntegerOverflow to pure_name_set
qualifier: 
code:         checkIntegerOverflow(-43979.60679604749);
-------------
-------------
Math_28
/root/workbench/d4j_buggy/Math_28/src/test/java//org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
analyze: testMath828Cycle
add add to all_set
add add to all_set
add add to all_set
add add to all_set
add add to all_set
add add to all_set
add add to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(1.0d, solution.getValue(), epsilon);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(validSolution(solution, constraints, epsilon));        
-------------
-------------
Math_29
/root/workbench/d4j_buggy/Math_29/src/test/java//org/apache/commons/math3/linear/SparseRealVectorTest.java
-------------
-------------
Math_31
/root/workbench/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/BinomialDistributionTest.java
analyze: testMath718
found containsAssert getting True in tryBlock, add assertEquals to mess_name_set
get block code:
        for (int trials = 500000; trials < 20000000; trials += 100000) {
            BinomialDistribution dist = new BinomialDistribution(trials, 0.5);
            int p = dist.inverseCumulativeProbability(0.5);
            Assert.assertEquals(trials / 2, p);
        }
is pure block
/root/workbench/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/FDistributionTest.java
analyze: testMath785
found containsAssert getting True in tryBlock, add assertTrue to mess_name_set
found containsAssert getting True in tryBlock, add fail to mess_name_set
get block code:
        try {
            double prob = 0.01;
            FDistribution f = new FDistribution(200000, 200000);
            double result = f.inverseCumulativeProbability(prob);
            Assert.assertTrue(result < 1.0);
        } catch (Exception e) {
            Assert.fail("Failing to calculate inverse cumulative probability");
        }
is pure block
-------------
-------------
Math_35
/root/workbench/d4j_buggy/Math_35/src/test/java//org/apache/commons/math3/genetics/ElitisticListPopulationTest.java
analyze: testConstructorTooLow
found unk statement expression at 69
        new ElitisticListPopulation(100, rate);
analyze: testConstructorTooHigh
found unk statement expression at 75
        new ElitisticListPopulation(100, rate);
analyze: testChromosomeListConstructorTooLow
found unk statement expression at 82
        new ElitisticListPopulation(chromosomes, 100, rate);
analyze: testChromosomeListConstructorTooHigh
found unk statement expression at 89
        new ElitisticListPopulation(chromosomes, 100, rate);
-------------
-------------
Math_36
/root/workbench/d4j_buggy/Math_36/src/test/java//org/apache/commons/math/fraction/BigFractionTest.java
analyze: testDoubleValueForLargeNumeratorAndDenominator
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(5, large.doubleValue(), 1e-15);
analyze: testFloatValueForLargeNumeratorAndDenominator
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(5, large.floatValue(), 1e-15);
-------------
-------------
Math_37
/root/workbench/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java
analyze: testTan
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, z.tan(), 1.0e-5);
found unk statement expression at 1001
        expected = new Complex(0, 1);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, actual, 1.0e-5);
found unk statement expression at 1003
        actual = new Complex(3.0, -1E10).tan();
found unk statement expression at 1004
        expected = new Complex(0, -1);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, actual, 1.0e-5);
analyze: testTanInf
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, infOne.tan());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, negInfOne.tan());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, infInf.tan());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, infNegInf.tan());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, negInfInf.tan());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());
analyze: testTanh
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);
found unk statement expression at 1038
        expected = new Complex(1, 0);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, actual, 1.0e-5);
found unk statement expression at 1040
        actual = new Complex(-1E10, 3.0).tanh();
found unk statement expression at 1041
        expected = new Complex(-1, 0);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, actual, 1.0e-5);
analyze: testTanhInf
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, oneInf.tanh());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, infInf.tanh());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, infNegInf.tanh());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, negInfInf.tanh());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());
-------------
-------------
Math_38
/root/workbench/d4j_buggy/Math_38/src/test/java//org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java
analyze: testConstrainedRosenWithMoreInterpolationPoints
found containsAssert getting True in tryBlock, add doTest to pure_name_set
get block code:
        for (int num = 1; num <= maxAdditionalPoints; num++) {
            doTest(new Rosen(), startPoint, boundaries,
                   GoalType.MINIMIZE,
                   1e-12, 1e-6, 2000,
                   num,
                   expected,
                   "num=" + num);
        }
is pure block
-------------
-------------
Math_40
/root/workbench/d4j_buggy/Math_40/src/test/java//org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java
analyze: testIssue716
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(sharpTurn.value(result) >= 0);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(-0.5, result, 1.0e-10);
-------------
-------------
Math_43
/root/workbench/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java
analyze: testOverrideVarianceWithMathClass
add setVarianceImpl to all_set
get block code:
        for(double i : scores) {
          stats.addValue(i);
        }
is mess block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(), 0); 
analyze: testOverrideMeanWithMathClass
add setMeanImpl to all_set
get block code:
        for(double i : scores) {
          stats.addValue(i);
        }
is mess block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0); 
analyze: testOverrideGeoMeanWithMathClass
add setGeoMeanImpl to all_set
get block code:
        for(double i : scores) {
          stats.addValue(i);
        }
is mess block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals((new GeometricMean()).evaluate(scores),stats.getGeometricMean(), 0); 
/root/workbench/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java
-------------
-------------
Math_44
/root/workbench/d4j_buggy/Math_44/src/test/java//org/apache/commons/math/ode/events/EventStateTest.java
analyze: testIssue695
add addEventHandler to all_set
add addEventHandler to all_set
add setInitialStepSize to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(target, tEnd, 1.0e-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(32.0, y[0], 1.0e-10);
-------------
-------------
Math_46
/root/workbench/d4j_buggy/Math_46/src/test/java//org/apache/commons/math/complex/ComplexTest.java
analyze: testDivideZero
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(z, Complex.NaN);
analyze: testAtanI
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(Complex.I.atan().isNaN());
-------------
-------------
Math_47
/root/workbench/d4j_buggy/Math_47/src/test/java//org/apache/commons/math/complex/ComplexTest.java
analyze: testDivideZero
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(z, Complex.INF);
analyze: testAtanI
get block code:
        for (int i = -10; i < 10; i++) {
            System.out.println(new Complex(0, 1 - 0.1 * i).atan());
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(Complex.I.atan().isInfinite());
-------------
-------------
Math_49
/root/workbench/d4j_buggy/Math_49/src/test/java//org/apache/commons/math/linear/SparseRealVectorTest.java
analyze: testConcurrentModification
add setEntry to all_set
add setEntry to all_set
add setEntry to all_set
add setEntry to all_set
found unk statement expression at 1013
        v2[0] = 0;
add setEntry to all_set
found unk statement expression at 1015
        v2[1] = 3;
add setEntry to all_set
found unk statement expression at 1017
        v2[2] = 0;
found unk statement expression at 1021
        w = u.ebeMultiply(v1);
found unk statement expression at 1022
        w = u.ebeMultiply(v2);
found unk statement expression at 1024
        w = u.ebeDivide(v1);
found unk statement expression at 1025
        w = u.ebeDivide(v2);
-------------
-------------
Math_51
/root/workbench/d4j_buggy/Math_51/src/test/java//org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java
analyze: testIssue631
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(3.4341896575482003, root, 1e-15);
-------------
-------------
Math_52
/root/workbench/d4j_buggy/Math_52/src/test/java//org/apache/commons/math/geometry/euclidean/threed/RotationTest.java
analyze: testIssue639
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);
-------------
-------------
Math_54
/root/workbench/d4j_buggy/Math_54/src/test/java//org/apache/commons/math/dfp/DfpTest.java
analyze: testIssue567
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);
-------------
-------------
Math_61
/root/workbench/d4j_buggy/Math_61/src/test/java//org/apache/commons/math/distribution/PoissonDistributionTest.java
analyze: testMean
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            dist = new PoissonDistributionImpl(-1);
            fail("negative mean: NotStrictlyPositiveException expected");
        } catch(NotStrictlyPositiveException ex) {
is pure block
found unk statement expression at 146
        dist = new PoissonDistributionImpl(10.0);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(10.0, dist.getMean(), 0.0);
-------------
-------------
Math_62
/root/workbench/d4j_buggy/Math_62/src/test/java//org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java
analyze: testQuinticMin
add setMaxEvaluations to all_set
add setSeed to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.0443342695, optimum.getValue(), 1e-9);
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        for (int i = 0; i < optima.length; ++i) {
            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);
        }
is pure block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(optimizer.getEvaluations() >= 50);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(optimizer.getEvaluations() <= 100);
-------------
-------------
Math_64
/root/workbench/d4j_buggy/Math_64/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
analyze: testMinpackFreudensteinRoth
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },
analyze: testMinpackJennrichSampson
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },
-------------
-------------
Math_65
/root/workbench/d4j_buggy/Math_65/src/test/java//org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
analyze: testCircleFitting
add addPoint to all_set
add addPoint to all_set
add addPoint to all_set
add addPoint to all_set
add addPoint to all_set
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(optimizer.getEvaluations() < 10);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(optimizer.getJacobianEvaluations() < 10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(96.07590211815305, center.x,      1.0e-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(48.13516790438953, center.y,      1.0e-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.839, cov[0][0], 0.001);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.731, cov[0][1], 0.001);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(cov[0][1], cov[1][0], 1.0e-14);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.786, cov[1][1], 0.001);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.384, errors[0], 0.001);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.905, errors[1], 0.001);
get block code:
        for (double d= 0; d < 2 * Math.PI; d += 0.01) {
            circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        }
is mess block
add fill to all_set
add fill to all_set
add optimize to all_set
found unk statement expression at 436
        cov = optimizer.getCovariances();
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.0016, cov[0][0], 0.001);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3.2e-7, cov[0][1], 1.0e-9);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(cov[0][1], cov[1][0], 1.0e-14);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.0016, cov[1][1], 0.001);
found unk statement expression at 441
        errors = optimizer.guessParametersErrors();
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.004, errors[0], 0.001);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.004, errors[1], 0.001);
-------------
-------------
Math_66
/root/workbench/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
analyze: testSinMin
add setSeed to all_set
add optimize to all_set
found containsAssert getting True in tryBlock, add assertTrue to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        for (int i = 1; i < optima.length; ++i) {
            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);
            assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);
            assertEquals(-1.0, f.value(optima[i]), 1.0e-10);
            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
        }
is pure block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations() > 150);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations() < 250);
analyze: testQuinticMin
add setRelativeAccuracy to all_set
add setSeed to all_set
add setAbsoluteAccuracy to all_set
add setRelativeAccuracy to all_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            minimizer.getOptima();
            fail("an exception should have been thrown");
        } catch (IllegalStateException ise) {
            // expected
        } catch (Exception e) {
            fail("wrong exception caught");
        }
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            minimizer.getOptimaValues();
            fail("an exception should have been thrown");
        } catch (IllegalStateException ise) {
            // expected
        } catch (Exception e) {
            fail("wrong exception caught");
        }
is pure block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.2719561270319131, result, 1.0e-13);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        for (int i = 0; i < optima.length; ++i) {
            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
        }
is pure block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    >= 120);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    <= 170);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() >= 120);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() <= 170);
/root/workbench/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java
analyze: testSinMin
add setMaxEvaluations to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(200, minimizer.getMaxEvaluations());
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            minimizer.getResult();
            fail("an exception should have been thrown");
        } catch (NoDataException ise) {
            // expected
        } catch (Exception e) {
            fail("wrong exception caught");
        }
is pure block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() <= 50);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() <= 50);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    <= 100);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    >=  15);
add setMaxEvaluations to all_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
            fail("an exception should have been thrown");
        } catch (FunctionEvaluationException fee) {
            // expected
        } catch (Exception e) {
            fail("wrong exception caught");
        }
is pure block
analyze: testQuinticMinStatistics
add setRelativeAccuracy to all_set
add setAbsoluteAccuracy to all_set
get block code:
        for (int i = 0; i < stat.length; i++) {
            stat[i] = new DescriptiveStatistics();
        }
is mess block
get block code:
        for (int i = 0; i < nSamples; i++) {
            final double start = min + i * delta;
            stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));
            stat[1].addValue(minimizer.getIterationCount());
            stat[2].addValue(minimizer.getEvaluations());
        }
is mess block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(medianIter, 17, Math.ulp(1d));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(medianEval, 18, Math.ulp(1d));
-------------
-------------
Math_67
/root/workbench/d4j_buggy/Math_67/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
analyze: testQuinticMin
add setSeed to all_set
add setAbsoluteAccuracy to all_set
add setRelativeAccuracy to all_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            minimizer.getOptima();
            fail("an exception should have been thrown");
        } catch (IllegalStateException ise) {
            // expected
        } catch (Exception e) {
            fail("wrong exception caught");
        }
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            minimizer.getOptimaValues();
            fail("an exception should have been thrown");
        } catch (IllegalStateException ise) {
            // expected
        } catch (Exception e) {
            fail("wrong exception caught");
        }
is pure block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        for (int i = 0; i < optima.length; ++i) {
            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
        }
is pure block
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    >= 510);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    <= 530);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() >= 150);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() <= 170);
-------------
-------------
Math_68
/root/workbench/d4j_buggy/Math_68/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
analyze: testMinpackFreudensteinRoth
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },
analyze: testMinpackJennrichSampson
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },
-------------
-------------
Math_71
/root/workbench/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
analyze: testMissedEndEvent
get block code:
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
is mess block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(tEvent, finalT, 5.0e-6);
found containsAssert getting True in tryBlock, add assertEquals to mess_name_set
get block code:
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
      }
is pure block
add addEventHandler to all_set
found unk statement expression at 89
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
found containsAssert getting True in tryBlock, add assertEquals to mess_name_set
get block code:
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
      }
is pure block
/root/workbench/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
analyze: testMissedEndEvent
get block code:
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
is mess block
add setInitialStepSize to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(tEvent, finalT, 5.0e-6);
found containsAssert getting True in tryBlock, add assertEquals to mess_name_set
get block code:
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
      }
is pure block
add setInitialStepSize to all_set
add addEventHandler to all_set
found unk statement expression at 92
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
found containsAssert getting True in tryBlock, add assertEquals to mess_name_set
get block code:
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
      }
is pure block
-------------
-------------
Math_72
/root/workbench/d4j_buggy/Math_72/src/test/java//org/apache/commons/math/analysis/solvers/BrentSolverTest.java
analyze: testRootEndpoints
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
found unk statement expression at 313
        result = solver.solve(f, 3, Math.PI);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
found unk statement expression at 316
        result = solver.solve(f, Math.PI, 4, 3.5);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
found unk statement expression at 319
        result = solver.solve(f, 3, Math.PI, 3.07);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
-------------
-------------
Math_74
/root/workbench/d4j_buggy/Math_74/src/test/java//org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java
analyze: polynomial
found containsAssert getting True in tryBlock, add assertTrue to pure_name_set
found containsAssert getting True in tryBlock, add assertTrue to pure_name_set
get block code:
        for (int nSteps = 1; nSteps < 7; ++nSteps) {
            AdamsMoultonIntegrator integ =
                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);
            TestProblemHandler handler = new TestProblemHandler(pb, integ);
            integ.addStepHandler(handler);
            integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),
                            pb.getFinalTime(), new double[pb.getDimension()]);
            if (nSteps < 4) {
                assertTrue(integ.getEvaluations() > 140);
            } else {
                assertTrue(integ.getEvaluations() < 90);
            }
is pure block
-------------
-------------
Math_76
/root/workbench/d4j_buggy/Math_76/src/test/java//org/apache/commons/math/linear/SingularValueSolverTest.java
analyze: testMath320A
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(reference.length, singularValues.length);
found containsAssert getting True in tryBlock, add assertEquals to mess_name_set
get block code:
        for (int i = 0; i < reference.length; ++i) {
            Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);
        }
is pure block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(rm.getColumnDimension(), resSVD.length);
found containsAssert getting True in tryBlock, add assertTrue to mess_name_set
get block code:
        for (double d0 = -k * h; d0 <= k * h; d0 += h) {
            for (double d1 = -k * h ; d1 <= k * h; d1 += h) {
                for (double d2 = -k * h; d2 <= k * h; d2 += h) {
                    double[] x = new double[] { resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2 };
                    Assert.assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);
                }
is pure block
analyze: testMath320B
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 2.0e-15);
-------------
-------------
Math_77
/root/workbench/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/ArrayRealVectorTest.java
analyze: testBasicFunctions
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 17.0, d_getL1Norm);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 6.0, d_getLInfNorm);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",9d, d_getL1Distance );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",9d, d_getL1Distance_2 );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",9d, d_getL1Distance_3 );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",3d, d_getLInfDistance );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",3d, d_getLInfDistance_2 );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",3d, d_getLInfDistance_3 );
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",32d, dot);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",32d, dot_2);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            v_null.unitVector();
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail("wrong exception caught");
        }
is pure block
add unitize to all_set
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            v_null.unitize();
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail("wrong exception caught");
        }
is pure block
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);
/root/workbench/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/SparseRealVectorTest.java
analyze: testBasicFunctions
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 17.0, d_getL1Norm);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 6.0, d_getLInfNorm);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",9d, d_getL1Distance );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",9d, d_getL1Distance_2 );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",3d, d_getLInfDistance );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",3d, d_getLInfDistance_2 );
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",32d, dot);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",32d, dot_2);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            v_null.unitVector();
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail("wrong exception caught");
        }
is pure block
add unitize to all_set
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            v_null.unitize();
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail("wrong exception caught");
        }
is pure block
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
-------------
-------------
Math_79
/root/workbench/d4j_buggy/Math_79/src/test/java//org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
analyze: testPerformClusterAnalysisDegenerate
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, clusters.size());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, (clusters.get(0).getPoints().size()));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(clusters.get(0).getPoints().contains(pt1));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(clusters.get(0).getPoints().contains(pt2));
-------------
-------------
Math_81
/root/workbench/d4j_buggy/Math_81/src/test/java//org/apache/commons/math/linear/EigenDecompositionImplTest.java
analyze: testMath308
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        for (int i = 0; i < refEigenValues.length; ++i) {
            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-5);
            assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7);
        }
is pure block
-------------
-------------
Math_83
/root/workbench/d4j_buggy/Math_83/src/test/java//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
analyze: testMath286
add add to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(6.9, solution.getValue(), .0000001);
-------------
-------------
Math_84
/root/workbench/d4j_buggy/Math_84/src/test/java//org/apache/commons/math/optimization/direct/MultiDirectionalTest.java
analyze: testMinimizeMaximize
add setConvergenceChecker to all_set
add setMaxIterations to all_set
add setStartConfiguration to all_set
found unk statement expression at 98
      optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(xM,        optimum.getPoint()[0], 4.0e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(valueXmYp, optimum.getValue(),    8.0e-13);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() > 120);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() < 150);
found unk statement expression at 105
      optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);              
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() > 120);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() < 150);
found unk statement expression at 113
      optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(xM,        optimum.getPoint()[0], 7.0e-7);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-7);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(valueXmYm, optimum.getValue(),    2.0e-14);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() > 120);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() < 150);
add setConvergenceChecker to all_set
found unk statement expression at 121
      optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(valueXpYp, optimum.getValue(),    2.0e-12);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() > 180);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() < 220);
analyze: testMath283
add setMaxIterations to all_set
add setMaxEvaluations to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );
-------------
-------------
Math_86
/root/workbench/d4j_buggy/Math_86/src/test//org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
analyze: testNotPositiveDefinite
add println to all_set
analyze: testMath274
found unk statement expression at 83
        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
-------------
-------------
Math_88
/root/workbench/d4j_buggy/Math_88/src/test//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
analyze: testMath272
add add to all_set
add add to all_set
add add to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.0, solution.getPoint()[0], .0000001);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.0, solution.getPoint()[1], .0000001);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.0, solution.getPoint()[2], .0000001);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3.0, solution.getValue(), .0000001);
-------------
-------------
Math_90
/root/workbench/d4j_buggy/Math_90/src/test//org/apache/commons/math/stat/FrequencyTest.java
analyze: testAddNonComparable
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            f.addValue(new Object()); // This was OK
            fail("Expected ClassCastException");
        } catch (ClassCastException expected) {
is pure block
add clear to all_set
add addValue to all_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            f.addValue(new Object());
            fail("Expected ClassCastException"); // Previously would have been IllegalArgument
        } catch (ClassCastException expected) {
is pure block
-------------
-------------
Math_92
/root/workbench/d4j_buggy/Math_92/src/test//org/apache/commons/math/util/MathUtilsTest.java
analyze: testBinomialCoefficientLarge
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertTrue to pure_name_set
get block code:
        for (int n = 0; n <= 200; n++) {
            for (int k = 0; k <= n; k++) {
                long ourResult = -1;
                long exactResult = -1;
                boolean shouldThrow = false;
                boolean didThrow = false;
                try {
                    ourResult = MathUtils.binomialCoefficient(n, k);
                } catch (ArithmeticException ex) {
                    didThrow = true;
                }
                try {
                    exactResult = binomialCoefficient(n, k);
                } catch (ArithmeticException ex) {
                    shouldThrow = true;
                }
                assertEquals(n+","+k, shouldThrow, didThrow);
                assertEquals(n+","+k, exactResult, ourResult);
                assertTrue(n+","+k, (n > 66 || !didThrow));
            }
is pure block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(exactResult, ourResult);
found unk statement expression at 204
        ourResult = MathUtils.binomialCoefficient(700, 697);
found unk statement expression at 205
        exactResult = binomialCoefficient(700, 697);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(exactResult, ourResult);
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            MathUtils.binomialCoefficient(700, 300);
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
is pure block
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        for (int i = 2000; i <= 10000; i += 2000) {
            ourResult = MathUtils.binomialCoefficient(i, 3);
            exactResult = binomialCoefficient(i, 3);
            assertEquals(exactResult, ourResult);
        }
is pure block
-------------
-------------
Math_93
/root/workbench/d4j_buggy/Math_93/src/test//org/apache/commons/math/util/MathUtilsTest.java
analyze: testFactorial
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        for (int i = 1; i < 21; i++) {
            assertEquals(i + "! ", factorial(i), MathUtils.factorial(i));
            assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);
            assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);
        }
is pure block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("0", 1, MathUtils.factorial(0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);
-------------
-------------
Math_95
/root/workbench/d4j_buggy/Math_95/src/test//org/apache/commons/math/distribution/FDistributionTest.java
analyze: testSmallDegreesOfFreedom
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.975, x, 1.0e-5);
add setDenominatorDegreesOfFreedom to all_set
found unk statement expression at 118
        p = fd.cumulativeProbability(0.975);
found unk statement expression at 119
        x = fd.inverseCumulativeProbability(p);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.975, x, 1.0e-5);
-------------
-------------
Math_97
/root/workbench/d4j_buggy/Math_97/src/test//org/apache/commons/math/analysis/BrentSolverTest.java
analyze: testRootEndpoints
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
found unk statement expression at 279
        result = solver.solve(3, Math.PI);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
-------------
-------------
Math_98
/root/workbench/d4j_buggy/Math_98/src/test//org/apache/commons/math/linear/BigMatrixImplTest.java
analyze: testMath209
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(a.getRowDimension(), b.length);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( 3.0, b[0].doubleValue(), 1.0e-12);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( 7.0, b[1].doubleValue(), 1.0e-12);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(11.0, b[2].doubleValue(), 1.0e-12);
/root/workbench/d4j_buggy/Math_98/src/test//org/apache/commons/math/linear/RealMatrixImplTest.java
analyze: testMath209
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(a.getRowDimension(), b.length);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( 3.0, b[0], 1.0e-12);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( 7.0, b[1], 1.0e-12);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(11.0, b[2], 1.0e-12);
-------------
-------------
Math_99
/root/workbench/d4j_buggy/Math_99/src/test//org/apache/commons/math/util/MathUtilsTest.java
analyze: testGcd
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, MathUtils.gcd(0, 0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(b, MathUtils.gcd(0, b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(a, MathUtils.gcd(a, 0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(b, MathUtils.gcd(0, -b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(a, MathUtils.gcd(-a, 0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(10, MathUtils.gcd(a, b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(10, MathUtils.gcd(-a, b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(10, MathUtils.gcd(a, -b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(10, MathUtils.gcd(-a, -b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, MathUtils.gcd(a, c));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, MathUtils.gcd(-a, c));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, MathUtils.gcd(a, -c));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, MathUtils.gcd(-a, -c));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            fail("expecting ArithmeticException");
        } catch (ArithmeticException expected) {
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            fail("expecting ArithmeticException");
        } catch (ArithmeticException expected) {
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            fail("expecting ArithmeticException");
        } catch (ArithmeticException expected) {
is pure block
analyze: testLcm
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, MathUtils.lcm(0, b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, MathUtils.lcm(a, 0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(b, MathUtils.lcm(1, b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(a, MathUtils.lcm(a, 1));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(150, MathUtils.lcm(a, b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(150, MathUtils.lcm(-a, b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(150, MathUtils.lcm(a, -b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(150, MathUtils.lcm(-a, -b));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2310, MathUtils.lcm(a, c));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, MathUtils.lcm(0, 0));
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
is pure block
-------------
-------------
Math_100
/root/workbench/d4j_buggy/Math_100/src/test//org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java
analyze: testBoundParameters
add estimate to all_set
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:       assertTrue(estimator.getRMS(problem) < 1.0e-10);
get block code:
      if (problem.getUnboundParameters()[0].getName().endsWith("1")) {
          i0 = 1;
          i1 = 0;
      }
is mess block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(0, errors[i0], 1.0e-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(0, errors[i1], 1.0e-10);
-------------
-------------
Math_102
/root/workbench/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareFactoryTest.java
/root/workbench/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareTestTest.java
analyze: testChiSquare
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square statistic", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "chi-square test statistic", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("chi-square test reject", testStatistic.chiSquareTest(expected1, observed1, 0.08));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("chi-square test accept", !testStatistic.chiSquareTest(expected1, observed1, 0.05));
found containsAssert getting True in tryBlock, add chiSquareTest to mess_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            testStatistic.chiSquareTest(expected1, observed1, 95);
            fail("alpha out of range, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            testStatistic.chiSquare(tooShortEx, tooShortObs);
            fail("arguments too short, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            testStatistic.chiSquare(unMatchedEx, unMatchedObs);
            fail("arrays have different lengths, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
is pure block
found unk statement expression at 92
        expected[0] = 0;
found containsAssert getting True in tryBlock, add chiSquareTest to mess_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            testStatistic.chiSquareTest(expected, observed, .01);
            fail("bad expected count, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
is pure block
found unk statement expression at 101
        expected[0] = 1;
found unk statement expression at 102
        observed[0] = -1;
found containsAssert getting True in tryBlock, add chiSquareTest to mess_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            testStatistic.chiSquareTest(expected, observed, .01);
            fail("bad expected count, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
is pure block
analyze: testChiSquareLargeTestStatistic
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.0, cst, 1E-3);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "chi-square test statistic", 
/root/workbench/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/TestUtilsTest.java
analyze: testChiSquare
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square statistic", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "chi-square test statistic", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("chi-square test reject", TestUtils.chiSquareTest(expected1, observed1, 0.07));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("chi-square test accept", !TestUtils.chiSquareTest(expected1, observed1, 0.05));
found containsAssert getting True in tryBlock, add chiSquareTest to mess_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            TestUtils.chiSquareTest(expected1, observed1, 95);
            fail("alpha out of range, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
is pure block
found containsAssert getting True in tryBlock, add chiSquare to mess_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            TestUtils.chiSquare(tooShortEx, tooShortObs);
            fail("arguments too short, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
is pure block
found containsAssert getting True in tryBlock, add chiSquare to mess_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            TestUtils.chiSquare(unMatchedEx, unMatchedObs);
            fail("arrays have different lengths, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
is pure block
found unk statement expression at 90
        expected[0] = 0;
found containsAssert getting True in tryBlock, add chiSquareTest to mess_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            TestUtils.chiSquareTest(expected, observed, .01);
            fail("bad expected count, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
is pure block
found unk statement expression at 99
        expected[0] = 1;
found unk statement expression at 100
        observed[0] = -1;
found containsAssert getting True in tryBlock, add chiSquareTest to mess_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            TestUtils.chiSquareTest(expected, observed, .01);
            fail("bad expected count, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
is pure block
analyze: testChiSquareLargeTestStatistic
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.0, cst, 1E-3);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "chi-square test statistic", 
-------------
-------------
Math_106
/root/workbench/d4j_buggy/Math_106/src/test//org/apache/commons/math/fraction/FractionFormatTest.java
analyze: testParseProperInvalidMinus
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            Fraction c = properFormat.parse(source);
            fail("invalid minus in improper fraction.");
        } catch (ParseException ex) {
is pure block
found unk statement expression at 240
        source = "2 2 / -3";
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            Fraction c = properFormat.parse(source);
            fail("invalid minus in improper fraction.");
        } catch (ParseException ex) {
is pure block
-------------
-------------
Mockito_2
/root/workbench/d4j_buggy/Mockito_2/test//org/mockito/internal/util/TimerTest.java
analyze: should_throw_friendly_reminder_exception_when_duration_is_negative
found containsAssert getting True in tryBlock, add fail to mess_name_set
found containsAssert getting True in tryBlock, add assertTrue to mess_name_set
get block code:
        try {
            new Timer(-1);
            Assert.fail("It is forbidden to create timer with negative value of timer's duration.");
        } catch (FriendlyReminderException e) {
            Assert.assertTrue(true);
        }
is pure block
/root/workbench/d4j_buggy/Mockito_2/test//org/mockito/verification/NegativeDurationTest.java
analyze: should_throw_exception_when_duration_is_negative_for_timeout_method
found containsAssert getting True in tryBlock, add fail to mess_name_set
found containsAssert getting True in tryBlock, add assertTrue to mess_name_set
get block code:
        try {
            Mockito.timeout(-1);
            Assert.fail("It is forbidden to invoke Mockito.timeout() with negative value.");
        } catch (FriendlyReminderException e) {
            Assert.assertTrue(true);
        }
is pure block
analyze: should_throw_exception_when_duration_is_negative_for_after_method
found containsAssert getting True in tryBlock, add fail to mess_name_set
found containsAssert getting True in tryBlock, add assertTrue to mess_name_set
get block code:
        try {
            Mockito.after(-1);
            Assert.fail("It is forbidden to invoke Mockito.after() with negative value.");
        } catch (FriendlyReminderException e) {
            Assert.assertTrue(true);
        }
is pure block
-------------
-------------
Mockito_3
/root/workbench/d4j_buggy/Mockito_3/test//org/mockito/internal/invocation/InvocationMatcherTest.java
analyze: should_capture_varargs_as_vararg
add mixedVarargs to all_set
add captureArgumentsFrom to all_set
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(m.getAllValues()).containsExactly("a", "b");
/root/workbench/d4j_buggy/Mockito_3/test//org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java
analyze: shouldVerifyCorrectlyNumberOfInvocationsWithVarargs
add newRow to all_set
add newRow to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(table).newRow(anyString(), eq("foo"), anyString(), anyString());
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(table).newRow(anyString(), anyString());
/root/workbench/d4j_buggy/Mockito_3/test//org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java
analyze: shouldMatchAnyVararg
add run to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).run(anyString(), anyString());
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).run((String) anyObject(), (String) anyObject());
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).run((String[]) anyVararg());
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, never()).run();
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, never()).run(anyString(), eq("f"));
/root/workbench/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
analyze: should_capture_byte_vararg_by_creating_captor_with_primitive
add varargsbyte to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).varargsbyte(argumentCaptor.capture());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals((byte) 2, (byte) argumentCaptor.getValue());
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);
analyze: should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper
add varargsbyte to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).varargsbyte(argumentCaptor.capture());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals((byte) 2, (byte) argumentCaptor.getValue());
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);
analyze: should_capture_vararg
add mixedVarargs to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).mixedVarargs(any(), argumentCaptor.capture());
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");
analyze: should_capture_all_vararg
add mixedVarargs to all_set
add mixedVarargs to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, times(2)).mixedVarargs(any(), argumentCaptor.capture());
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c", "again ?!");
analyze: captures_correctly_when_captor_used_multiple_times
add mixedVarargs to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");
analyze: captures_correctly_when_captor_used_on_pure_vararg_method
add varargs to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).varargs(eq(42), argumentCaptor.capture());
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getValue()).contains("capturedValue");
-------------
-------------
Mockito_4
/root/workbench/d4j_buggy/Mockito_4/test//org/mockito/exceptions/ReporterTest.java
analyze: can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted
found unk statement expression at 41
        new Reporter().noMoreInteractionsWanted(invocation_with_bogus_default_answer, Collections.<VerificationAwareInvocation>emptyList());
analyze: can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order
found unk statement expression at 47
        new Reporter().noMoreInteractionsWantedInOrder(invocation_with_bogus_default_answer);
analyze: can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure
found unk statement expression at 79
        new Reporter().cannotInjectDependency(someField(), mock_with_bogus_default_answer, new Exception());
/root/workbench/d4j_buggy/Mockito_4/test//org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java
analyze: should_not_throw_a_ClassCastException
add m1 to all_set
add verifyZeroInteractions to all_set
found containsAssert getting True in analyze_invocation, add verifyZeroInteractions to pure_name_set
qualifier: 
code:         verifyZeroInteractions(test);
-------------
-------------
Mockito_6
/root/workbench/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
analyze: shouldNotAcceptNullInAnyXMatchers
add when to all_set
add when to all_set
add when to all_set
add when to all_set
add when to all_set
add when to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.oneArg((Object) null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.oneArg((String) null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forList(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forMap(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forCollection(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forSet(null));
analyze: shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers
add when to all_set
add when to all_set
add when to all_set
add when to all_set
add when to all_set
add when to all_set
add when to all_set
add when to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forInteger(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forCharacter(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forShort(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forByte(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forBoolean(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forLong(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forFloat(null));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forDouble(null));
/root/workbench/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/MatchersTest.java
analyze: anyStringMatcher
add when to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.oneArg(""));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.oneArg("any string"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.oneArg((String) null));
/root/workbench/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java
analyze: shouldAllowAnyList
add when to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.forList(Arrays.asList("x", "y")));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forList(null));
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, times(1)).forList(anyList());
analyze: shouldAllowAnyCollection
add when to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.forCollection(Arrays.asList("x", "y")));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forCollection(null));
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, times(1)).forCollection(anyCollection());
analyze: shouldAllowAnyMap
add when to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.forMap(new HashMap<String, String>()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forMap(null));
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, times(1)).forMap(anyMap());
analyze: shouldAllowAnySet
add when to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.forSet(new HashSet<String>()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forSet(null));
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, times(1)).forSet(anySet());
-------------
-------------
Mockito_9
/root/workbench/d4j_buggy/Mockito_9/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
analyze: abstractMethodReturnsDefault
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals("abstract null", thing.fullName());
analyze: abstractMethodStubbed
add when to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals("abstract me", thing.fullName());
analyze: testCallsRealInterfaceMethod
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:     	assertNull(list.get(1));
-------------
-------------
Mockito_10
/root/workbench/d4j_buggy/Mockito_10/test//org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java
analyze: should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(the_deep_stub).isNotNull();
-------------
-------------
Mockito_11
/root/workbench/d4j_buggy/Mockito_11/test//org/mockito/internal/creation/DelegatingMethodTest.java
analyze: equals_should_return_true_when_equal
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(delegatingMethod.equals(equal));
analyze: equals_should_return_true_when_self
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(delegatingMethod.equals(delegatingMethod));
-------------
-------------
Mockito_13
/root/workbench/d4j_buggy/Mockito_13/test//org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java
analyze: shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine
add when to all_set
add simpleMethod to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mockTwo).simpleMethod(mock.otherMethod());
found containsAssert getting True in tryBlock, add verify to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            verify(mockTwo, never()).simpleMethod(mock.otherMethod());
            fail();
        } catch (NeverWantedButInvoked e) {}
is pure block
-------------
-------------
Mockito_14
/root/workbench/d4j_buggy/Mockito_14/test//org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java
analyze: shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine
add when to all_set
add simpleMethod to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mockTwo).simpleMethod(mock.otherMethod());
-------------
-------------
Mockito_15
/root/workbench/d4j_buggy/Mockito_15/test//org/mockitousage/bugs/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java
analyze: shouldInjectUsingPropertySetterIfAvailable
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(awaitingInjection.propertySetterUsed);
-------------
-------------
Mockito_16
/root/workbench/d4j_buggy/Mockito_16/test//org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java
analyze: shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS
add when to all_set
-------------
-------------
Mockito_17
/root/workbench/d4j_buggy/Mockito_17/test//org/mockitousage/basicapi/MocksSerializationTest.java
analyze: shouldBeSerializeAndHaveExtraInterfaces
add serializeAndBack to all_set
add serializeAndBack to all_set
-------------
-------------
Mockito_19
/root/workbench/d4j_buggy/Mockito_19/test//org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java
analyze: shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable
add initMocks to all_set
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code: 		assertNull(otherSuperUnderTesting.candidate1);
add assertNotNull to all_set
found containsAssert getting True in analyze_invocation, add assertNotNull to pure_name_set
qualifier: 
code: 		assertNotNull(otherSuperUnderTesting.candidate2);
-------------
-------------
Mockito_20
/root/workbench/d4j_buggy/Mockito_20/test//org/mockitousage/annotation/SpyAnnotationTest.java
analyze: should_report_when_constructor_is_explosive
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add assertThat to mess_name_set
get block code:
        try {
            MockitoAnnotations.initMocks(new FailingSpy());
            fail();
        } catch (MockitoException e) {
            Assertions.assertThat(e.getMessage()).contains("Unable to create mock instance");
        }
is pure block
analyze: should_spy_inner_class
add initMocks to all_set
add when to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("inner strength", outer.strength.fullStrength());
/root/workbench/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
analyze: can_create_mock_with_constructor
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("hey!", mock.getMessage());
analyze: can_mock_abstract_classes
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("hey!", mock.getMessage());
analyze: can_spy_abstract_classes
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("hey!", mock.getMessage());
analyze: can_mock_inner_classes
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("hey!", mock.getMessage());
analyze: exception_message_when_constructor_not_found
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertContains to pure_name_set
get block code:
        try {
            //when
            spy(HasConstructor.class);
            //then
            fail();
        } catch (MockitoException e) {
            assertEquals("Unable to create mock instance of type 'HasConstructor'", e.getMessage());
            assertContains("0-arg constructor", e.getCause().getMessage());
        }
is pure block
analyze: mocking_inner_classes_with_wrong_outer_instance
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
found containsAssert getting True in tryBlock, add assertContains to pure_name_set
get block code:
        try {
            //when
            mock(InnerClass.class, withSettings().useConstructor().outerInstance("foo").defaultAnswer(CALLS_REAL_METHODS));
            //then
            fail();
        } catch (MockitoException e) {
            assertEquals("Unable to create mock instance of type 'InnerClass'", e.getMessage());
            assertContains("Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.", e.getCause().getMessage());
        }
is pure block
-------------
-------------
Mockito_21
/root/workbench/d4j_buggy/Mockito_21/test//org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java
analyze: creates_instances_of_inner_classes
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new ConstructorInstantiator(this).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new ConstructorInstantiator(new ChildOfThis()).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);
-------------
-------------
Mockito_23
/root/workbench/d4j_buggy/Mockito_23/test//org/mockitousage/stubbing/DeepStubsSerializableTest.java
analyze: should_serialize_and_deserialize_mock_created_by_deep_stubs
add when to all_set
add when to all_set
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(o).isInstanceOf(SampleClass.class);
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(deserializedSample.getSample().isSth()).isEqualTo(STUBBED_BOOLEAN_VALUE);
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(deserializedSample.getSample().getNumber()).isEqualTo(STUBBED_INTEGER_VALUE);
-------------
-------------
Mockito_25
/root/workbench/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
analyze: generic_deep_mock_frenzy__look_at_these_chained_calls
analyze: can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class
analyze: can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class
analyze: can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class
analyze: can_create_mock_from_return_types_declared_with_a_bounded_wildcard
add floatValue to all_set
analyze: will_return_default_value_on_non_mockable_nested_generic
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(genericsNest.returningNonMockableNestedGeneric().keySet().iterator().next()).isNull();
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(listOfInteger.get(25)).isEqualTo(0);
-------------
-------------
Mockito_30
/root/workbench/d4j_buggy/Mockito_30/test//org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
analyze: shouldPrintTheParametersOnSmartNullPointerExceptionMessage
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add assertTrue to pure_name_set
get block code:
        try {
            smartNull.get();
            fail();
        } catch (SmartNullPointerException ex) {
        	String message = ex.getMessage();
        	assertTrue("Exception message should include oompa and lumpa, but was: " + message,
        			message.contains("oompa, lumpa"));
        }
is pure block
-------------
-------------
Mockito_31
/root/workbench/d4j_buggy/Mockito_31/test//org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
analyze: shouldPrintTheParametersWhenCallingAMethodWithArgs
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals("SmartNull returned by unstubbed withArgs(oompa, lumpa) method on mock", smartNull + "");
-------------
-------------
Mockito_32
/root/workbench/d4j_buggy/Mockito_32/test//org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java
analyze: shouldPrintNiceName
add add to all_set
found containsAssert getting True in tryBlock, add verify to pure_name_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add assertThat to mess_name_set
get block code:
        try {
            verify(veryCoolSpy).add(2);
            fail();
        } catch(AssertionError e) {
            Assertions.assertThat(e.getMessage()).contains("veryCoolSpy");
        }
is pure block
-------------
-------------
Mockito_35
/root/workbench/d4j_buggy/Mockito_35/test//org/mockitousage/bugs/NPEWithCertainMatchersTest.java
analyze: shouldNotThrowNPEWhenIntegerPassed
add intArgumentMethod to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).intArgumentMethod(isA(Integer.class));
analyze: shouldNotThrowNPEWhenIntPassed
add intArgumentMethod to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).intArgumentMethod(isA(Integer.class));
analyze: shouldNotThrowNPEWhenIntegerPassedToEq
add intArgumentMethod to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).intArgumentMethod(eq(new Integer(100)));
analyze: shouldNotThrowNPEWhenIntegerPassedToSame
add intArgumentMethod to all_set
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, never()).intArgumentMethod(same(new Integer(100)));
-------------
-------------
Mockito_36
/root/workbench/d4j_buggy/Mockito_36/test//org/mockito/internal/invocation/InvocationTest.java
analyze: shouldScreamWhenCallingRealMethodOnInterface
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            //when
            invocationOnInterface.callRealMethod();
            //then
            fail();
        } catch(MockitoException e) {}
is pure block
/root/workbench/d4j_buggy/Mockito_36/test//org/mockitousage/spies/SpyingOnInterfacesTest.java
analyze: shouldFailInRuntimeWhenCallingRealMethodOnInterface
add when to all_set
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            //when
            list.get(0);            
            //then
            fail();
        } catch (MockitoException e) {}
is pure block
-------------
-------------
Mockito_37
/root/workbench/d4j_buggy/Mockito_37/test//org/mockito/internal/stubbing/answers/AnswersValidatorTest.java
analyze: shouldFailWhenCallingRealMethodOnIterface
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            //when
            validator.validate(new CallsRealMethods(), inovcationOnIterface);
            //then
            fail();
        } catch (MockitoException e) {}
is pure block
/root/workbench/d4j_buggy/Mockito_37/test//org/mockitousage/spies/SpyingOnInterfacesTest.java
analyze: shouldFailFastWhenCallingRealMethodOnInterface
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            //when
            when(list.get(0)).thenCallRealMethod();
            //then
            fail();
        } catch (MockitoException e) {}
is pure block
-------------
-------------
Time_1
/root/workbench/d4j_buggy/Time_1/src/test/java//org/joda/time/TestPartial_Constructors.java
analyze: testConstructorEx7_TypeArray_intArray
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add assertMessageContains to pure_name_set
get block code:
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, "must be in order", "largest-smallest");
        }
is pure block
found unk statement expression at 271
        types = new DateTimeFieldType[] {
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add assertMessageContains to pure_name_set
get block code:
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, "must be in order", "largest-smallest");
        }
is pure block
found unk statement expression at 280
        types = new DateTimeFieldType[] {
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add assertMessageContains to pure_name_set
get block code:
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, "must be in order", "largest-smallest");
        }
is pure block
found unk statement expression at 289
        types = new DateTimeFieldType[] {
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add assertMessageContains to pure_name_set
get block code:
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, "must be in order", "largest-smallest");
        }
is pure block
found unk statement expression at 298
        types = new DateTimeFieldType[] {
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add assertMessageContains to pure_name_set
get block code:
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, "must be in order", "largest-smallest");
        }
is pure block
found unk statement expression at 307
        types = new DateTimeFieldType[] {
found containsAssert getting True in tryBlock, add fail to pure_name_set
found containsAssert getting True in tryBlock, add assertMessageContains to pure_name_set
get block code:
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, "must be in order", "largest-smallest");
        }
is pure block
-------------
-------------
Time_2
/root/workbench/d4j_buggy/Time_2/src/test/java//org/joda/time/TestPartial_Basics.java
analyze: testWith_baseAndArgHaveNoRange
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, result.size());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, result.indexOf(DateTimeFieldType.era()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, result.indexOf(DateTimeFieldType.year()));
-------------
-------------
Time_3
/root/workbench/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
analyze: testAdd_DurationFieldType_int_dstOverlapWinter_addZero
add addHours to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
add add to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
analyze: testAddYears_int_dstOverlapWinter_addZero
add addHours to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
add addYears to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
analyze: testAddMonths_int_dstOverlapWinter_addZero
add addHours to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
add addMonths to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
analyze: testAddDays_int_dstOverlapWinter_addZero
add addHours to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
add addDays to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
analyze: testAddWeeks_int_dstOverlapWinter_addZero
add addHours to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
add addWeeks to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
-------------
-------------
Time_5
/root/workbench/d4j_buggy/Time_5/src/test/java//org/joda/time/TestPeriod_Basics.java
analyze: testNormalizedStandard_periodType_months1
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
analyze: testNormalizedStandard_periodType_months2
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
analyze: testNormalizedStandard_periodType_monthsWeeks
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);
-------------
-------------
Time_6
/root/workbench/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
analyze: test_plusYears_positiveToZero_crossCutover
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, date.plusYears(-2003));
analyze: test_plusYears_positiveToNegative_crossCutover
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, date.plusYears(-2004));
analyze: test_plusWeekyears_positiveToZero_crossCutover
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, date.weekyear().addToCopy(-2003));
analyze: test_plusWeekyears_positiveToNegative_crossCutover
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, date.weekyear().addToCopy(-2004));
analyze: test_cutoverPreZero
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            GJChronology.getInstance(DateTimeZone.UTC, cutover);
            fail();
        } catch (IllegalArgumentException ex) {
is pure block
-------------
-------------
Time_8
/root/workbench/d4j_buggy/Time_8/src/test/java//org/joda/time/TestDateTimeZone.java
analyze: testForOffsetHoursMinutes_int_int
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+02:15"), DateTimeZone.forOffsetHoursMinutes(2, 15));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+02:00"), DateTimeZone.forOffsetHoursMinutes(2, 0));
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -15);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+00:15"), DateTimeZone.forOffsetHoursMinutes(0, 15));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+00:00"), DateTimeZone.forOffsetHoursMinutes(0, 0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-00:15"), DateTimeZone.forOffsetHoursMinutes(0, -15));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, -15));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, 15));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
-------------
-------------
Time_9
/root/workbench/d4j_buggy/Time_9/src/test/java//org/joda/time/TestDateTimeZone.java
analyze: testForOffsetHoursMinutes_int_int
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
found containsAssert getting True in tryBlock, add fail to pure_name_set
get block code:
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            fail();
        } catch (IllegalArgumentException ex) {}
is pure block
-------------
-------------
Time_10
/root/workbench/d4j_buggy/Time_10/src/test/java//org/joda/time/TestDays.java
analyze: testFactory_daysBetween_RPartial_MonthDay
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(27, Days.daysBetween(start1, end1).getDays());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(28, Days.daysBetween(start1, end2).getDays());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Days.daysBetween(start2, end1).getDays());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, Days.daysBetween(start2, end2).getDays());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-27, Days.daysBetween(end1, start1).getDays());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-28, Days.daysBetween(end2, start1).getDays());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Days.daysBetween(end1, start2).getDays());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, Days.daysBetween(end2, start2).getDays());
/root/workbench/d4j_buggy/Time_10/src/test/java//org/joda/time/TestMonths.java
analyze: testFactory_monthsBetween_RPartial_MonthDay
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Months.monthsBetween(start, end1).getMonths());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Months.monthsBetween(start, end2).getMonths());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, Months.monthsBetween(start, end3).getMonths());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Months.monthsBetween(end1, start).getMonths());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Months.monthsBetween(end2, start).getMonths());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, Months.monthsBetween(end3, start).getMonths());
-------------
-------------
Time_12
/root/workbench/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDateTime_Constructors.java
analyze: testFactory_fromCalendarFields_beforeYearZero1
add set to all_set
add set to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
analyze: testFactory_fromCalendarFields_beforeYearZero3
add set to all_set
add set to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
analyze: testFactory_fromDateFields_beforeYearZero1
add set to all_set
add set to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
analyze: testFactory_fromDateFields_beforeYearZero3
add set to all_set
add set to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
/root/workbench/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDate_Constructors.java
analyze: testFactory_fromCalendarFields_beforeYearZero1
add set to all_set
add set to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDate.fromCalendarFields(cal));
analyze: testFactory_fromCalendarFields_beforeYearZero3
add set to all_set
add set to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDate.fromCalendarFields(cal));
analyze: testFactory_fromDateFields_beforeYearZero1
add set to all_set
add set to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
analyze: testFactory_fromDateFields_beforeYearZero3
add set to all_set
add set to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
-------------
-------------
Time_13
/root/workbench/d4j_buggy/Time_13/src/test/java//org/joda/time/format/TestISOPeriodFormat.java
analyze: testFormatStandard_negative
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("P-1Y-2M-3W-4DT-5H-6M-7.008S", ISOPeriodFormat.standard().print(p));
found unk statement expression at 122
        p = Period.years(-54);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("P-54Y", ISOPeriodFormat.standard().print(p));
found unk statement expression at 125
        p = Period.seconds(4).withMillis(-8);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("PT3.992S", ISOPeriodFormat.standard().print(p));
found unk statement expression at 128
        p = Period.seconds(-4).withMillis(8);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("PT-3.992S", ISOPeriodFormat.standard().print(p));
found unk statement expression at 131
        p = Period.seconds(-23);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("PT-23S", ISOPeriodFormat.standard().print(p));
found unk statement expression at 134
        p = Period.millis(-8);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("PT-0.008S", ISOPeriodFormat.standard().print(p));
-------------
-------------
Time_17
/root/workbench/d4j_buggy/Time_17/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
analyze: testBug3476684_adjustOffset
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:         assertSame(base, base.withEarlierOffsetAtOverlap());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:         assertSame(base, base.withLaterOffsetAtOverlap());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:         assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:         assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());
-------------
-------------
Time_20
/root/workbench/d4j_buggy/Time_20/src/test/java//org/joda/time/format/TestDateTimeFormatterBuilder.java
analyze: test_printParseZoneDawsonCreek
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2007-03-04 12:30 America/Dawson_Creek", f.print(dt));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(dt, f.parseDateTime("2007-03-04 12:30 America/Dawson_Creek"));
-------------
-------------
Time_23
/root/workbench/d4j_buggy/Time_23/src/test/java//org/joda/time/TestDateTimeZone.java
analyze: testForID_String_old
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add put to all_set
found containsAssert getting True in tryBlock, add assertEquals to pure_name_set
get block code:
        for (String key : map.keySet()) {
            String value = map.get(key);
            TimeZone juZone = TimeZone.getTimeZone(key);
            DateTimeZone zone = DateTimeZone.forTimeZone(juZone);
            assertEquals(value, zone.getID());
//            System.out.println(juZone);
is pure block
-------------
-------------
Time_26
/root/workbench/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
analyze: testWithMinuteOfHourInDstChange_mockZone
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:59:00.000+00:30", post.toString());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString());  // retain offset
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString());  // retain offset
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());
analyze: testWithHourOfDayInDstChange
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.123+02:00", test.toString());
analyze: testWithMinuteOfHourInDstChange
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:00:10.123+02:00", test.toString());
analyze: testWithSecondOfMinuteInDstChange
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:00.123+02:00", test.toString());
analyze: testWithMillisOfSecondInDstChange_Paris_summer
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.000+02:00", test.toString());
analyze: testWithMillisOfSecondInDstChange_NewYork_winter
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2007-11-04T01:30:00.123-05:00", dateTime.toString());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2007-11-04T01:30:00.000-05:00", test.toString());
analyze: testBug2182444_usCentral
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());
analyze: testBug2182444_ausNSW
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());
-------------
-------------
Closure_3
/root/workbench/d4j_buggy/Closure_3/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
analyze: testDoNotInlineCatchExpression1
add noInline to all_set
found containsAssert getting True in method recursive, add test to pure_name_set
found containsAssert getting True in method recursive, add inline to pure_name_set
found containsAssert getting True in analyze_invocation, add noInline to pure_name_set
qualifier: 
code:     noInline(
analyze: testDoNotInlineCatchExpression1a
add noInline to all_set
found containsAssert getting True in analyze_invocation, add noInline to pure_name_set
qualifier: 
code:     noInline(
analyze: testDoNotInlineCatchExpression3
add noInline to all_set
found containsAssert getting True in analyze_invocation, add noInline to pure_name_set
qualifier: 
code:     noInline(
-------------
-------------
Closure_4
/root/workbench/d4j_buggy/Closure_4/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testImplementsLoop
add testClosureTypesMultipleWarnings to all_set
found containsAssert getting True in analyze_invocation, add testClosureTypesMultipleWarnings to pure_name_set
qualifier: 
code:     testClosureTypesMultipleWarnings(
analyze: testImplementsExtendsLoop
add testClosureTypesMultipleWarnings to all_set
found containsAssert getting True in analyze_invocation, add testClosureTypesMultipleWarnings to pure_name_set
qualifier: 
code:     testClosureTypesMultipleWarnings(
analyze: testConversionFromInterfaceToRecursiveConstructor
add testClosureTypesMultipleWarnings to all_set
found containsAssert getting True in analyze_invocation, add testClosureTypesMultipleWarnings to pure_name_set
qualifier: 
code:     testClosureTypesMultipleWarnings(
-------------
-------------
Closure_6
/root/workbench/d4j_buggy/Closure_6/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
analyze: testTypeRedefinition
add testClosureTypesMultipleWarnings to all_set
found containsAssert getting True in analyze_invocation, add testClosureTypesMultipleWarnings to pure_name_set
qualifier: 
code:     testClosureTypesMultipleWarnings(
/root/workbench/d4j_buggy/Closure_6/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testTypeRedefinition
add testClosureTypesMultipleWarnings to all_set
found containsAssert getting True in analyze_invocation, add testClosureTypesMultipleWarnings to pure_name_set
qualifier: 
code:     testClosureTypesMultipleWarnings("a={};/**@enum {string}*/ a.A = {ZOR:'b'};"
analyze: testIssue635b
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_8
/root/workbench/d4j_buggy/Closure_8/test//com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java
analyze: testIssue820
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f(a){ var b=1; a=2; var c; }");
-------------
-------------
Closure_9
/root/workbench/d4j_buggy/Closure_9/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
analyze: testGuessModuleName
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$baz",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$baz",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$bar$baz",
-------------
-------------
Closure_16
/root/workbench/d4j_buggy/Closure_16/test//com/google/javascript/jscomp/IntegrationTest.java
analyze: testIssue772
found unk statement expression at 1866
    options.closurePass = true;
found unk statement expression at 1867
    options.checkTypes = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
/root/workbench/d4j_buggy/Closure_16/test//com/google/javascript/jscomp/ScopedAliasesTest.java
analyze: testIssue772
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_21
/root/workbench/d4j_buggy/Closure_21/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
analyze: testUselessCode
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x) { if(x) return; }", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x) { if(x); }", "function f(x) { if(x); }", e);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("if(x) x = y;", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("x = 3;", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var x = 'test'", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var x = 'test'\n'str'",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("foo();;;;bar();;;;", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = 5, b = 6", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = 5, b == 6",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (5, 6)",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (bar(), 6, 7)",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (bar(), bar(), 7, 8)",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (b = 7, 6)", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
-------------
-------------
Closure_22
/root/workbench/d4j_buggy/Closure_22/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
analyze: testUselessCode
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x) { if(x) return; }", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x) { if(x); }", "function f(x) { if(x); }", e);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("if(x) x = y;", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("x = 3;", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var x = 'test'", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var x = 'test'\n'str'",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("foo();;;;bar();;;;", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = 5, b = 6", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = 5, b == 6",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (5, 6)",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (bar(), 6, 7)",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (bar(), bar(), 7, 8)",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (b = 7, 6)", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
-------------
-------------
Closure_24
/root/workbench/d4j_buggy/Closure_24/test//com/google/javascript/jscomp/ScopedAliasesTest.java
analyze: testNonAliasLocal
add testScopedFailure to all_set
found containsAssert getting True in analyze_invocation, add testScopedFailure to pure_name_set
qualifier: 
code:     testScopedFailure("var x = 10", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
add testScopedFailure to all_set
found containsAssert getting True in analyze_invocation, add testScopedFailure to pure_name_set
qualifier: 
code:     testScopedFailure("var x = goog.dom + 10",
add testScopedFailure to all_set
found containsAssert getting True in analyze_invocation, add testScopedFailure to pure_name_set
qualifier: 
code:     testScopedFailure("var x = goog['dom']",
add testScopedFailure to all_set
found containsAssert getting True in analyze_invocation, add testScopedFailure to pure_name_set
qualifier: 
code:     testScopedFailure("var x = goog.dom, y = 10",
add testScopedFailure to all_set
found containsAssert getting True in analyze_invocation, add testScopedFailure to pure_name_set
qualifier: 
code:     testScopedFailure("function f() {}",
-------------
-------------
Closure_25
/root/workbench/d4j_buggy/Closure_25/test//com/google/javascript/jscomp/TypeInferenceTest.java
analyze: testBackwardsInferenceNew
add inFunction to all_set
found containsAssert getting True in method recursive, add assertEquals to pure_name_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("{foo: (number|undefined)}", getType("y").toString());
-------------
-------------
Closure_26
/root/workbench/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
analyze: testProcessCJS
add add to all_set
add add to all_set
add setFilename to all_set
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("exports.test = 1",
analyze: testTransformAMDAndProcessCJS
add add to all_set
add add to all_set
add add to all_set
add setFilename to all_set
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("define({foo: 1})",
/root/workbench/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
analyze: testWithoutExports
add setFilename to all_set
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
add setFilename to all_set
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testExports
add setFilename to all_set
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testVarRenaming
add setFilename to all_set
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testDash
add setFilename to all_set
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testModuleName
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$foo$baz",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$foo$baz_bar",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$baz",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$baz",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$baz", ProcessCommonJSModules.toModuleName(
add setFilename to all_set
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_27
/root/workbench/d4j_buggy/Closure_27/test//com/google/javascript/rhino/IRTest.java
analyze: testIssue727_1
add testIR to all_set
found containsAssert getting True in analyze_invocation, add testIR to pure_name_set
qualifier: 
code:     testIR(
analyze: testIssue727_2
add testIR to all_set
found containsAssert getting True in analyze_invocation, add testIR to pure_name_set
qualifier: 
code:     testIR(
analyze: testIssue727_3
add testIR to all_set
found containsAssert getting True in analyze_invocation, add testIR to pure_name_set
qualifier: 
code:     testIR(
-------------
-------------
Closure_29
/root/workbench/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
analyze: testObject10
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);",
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c",
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c",
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);",
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);",
analyze: testObject12
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var a; a = {x:1, y:2}; f(a.x, a.y2);",
analyze: testObject22
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("while(1) { var a = {y:1}; if (b) a.x = 2; f(a.y, a.x);}",
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}",
analyze: testIssue724
add testSameLocal to all_set
found containsAssert getting True in analyze_invocation, add testSameLocal to pure_name_set
qualifier: 
code:     testSameLocal(
/root/workbench/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/IntegrationTest.java
analyze: testIssue724
add setOptionsForCompilationLevel to all_set
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(options, code, result);
-------------
-------------
Closure_30
/root/workbench/d4j_buggy/Closure_30/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
analyze: testInlineAcrossSideEffect1
add noInline to all_set
found containsAssert getting True in method recursive, add test to pure_name_set
found containsAssert getting True in method recursive, add inline to pure_name_set
found containsAssert getting True in analyze_invocation, add noInline to pure_name_set
qualifier: 
code:     noInline("var y; var x = noSFX(y); print(x)");
analyze: testCanInlineAcrossNoSideEffect
add noInline to all_set
found containsAssert getting True in analyze_invocation, add noInline to pure_name_set
qualifier: 
code:     noInline(
analyze: testIssue698
add inline to all_set
found containsAssert getting True in analyze_invocation, add inline to pure_name_set
qualifier: 
code:     inline(
-------------
-------------
Closure_32
/root/workbench/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/IntegrationTest.java
analyze: testIssue701
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(createCompilerOptions(), ascii);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(result, lastCompiler.toSource());
/root/workbench/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
analyze: testParsePreserve
found unk statement expression at 1275
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
add parse to all_set
found containsAssert getting True in method recursive, add assertTrue to pure_name_set
found containsAssert getting True in analyze_invocation, add parse to pure_name_set
qualifier: 
code:     parse(comment);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());
analyze: testParseLicense
found unk statement expression at 1283
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
add parse to all_set
found containsAssert getting True in analyze_invocation, add parse to pure_name_set
qualifier: 
code:     parse(comment);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());
analyze: testParseLicenseAscii
found unk statement expression at 1291
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
add parse to all_set
found containsAssert getting True in analyze_invocation, add parse to pure_name_set
qualifier: 
code:     parse(comment);
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(" Foo\n   Bar\n\n  Baz", node.getJSDocInfo().getLicense());
-------------
-------------
Closure_34
/root/workbench/d4j_buggy/Closure_34/test//com/google/javascript/jscomp/CodePrinterTest.java
analyze: testManyAdds
get block code:
    for (int i = 2; i < numAdds; i++) {
      current = new Node(Token.ADD, current);

      // 1000 is printed as 1E3, and screws up our test.
      int num = i % 1000;
      numbers.add(String.valueOf(num));
      current.addChildToBack(Node.newNumber(num));
    }
is mess block
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(expected, actual);
-------------
-------------
Closure_37
/root/workbench/d4j_buggy/Closure_37/test//com/google/javascript/jscomp/IntegrationTest.java
analyze: testIncompleteFunction
found unk statement expression at 1939
    options.ideMode = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(options,
-------------
-------------
Closure_39
/root/workbench/d4j_buggy/Closure_39/test//com/google/javascript/rhino/jstype/RecordTypeTest.java
analyze: testRecursiveRecord
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("{loop: number, number: number, string: string}",
add setReferencedType to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("{loop: {...}, number: number, string: string}",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("{loop: ?, number: number, string: string}",
add assertEquivalenceOperations to all_set
found containsAssert getting True in analyze_invocation, add assertEquivalenceOperations to mess_name_set
qualifier: Asserts
code:     Asserts.assertEquivalenceOperations(record, loop);
analyze: testLongToString
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("{a1: number, a2: number, a3: number, a4: number, ...}",
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(
-------------
-------------
Closure_40
/root/workbench/d4j_buggy/Closure_40/test//com/google/javascript/jscomp/IntegrationTest.java
analyze: testIssue284
found unk statement expression at 1768
    options.smartNameRemoval = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(options,
/root/workbench/d4j_buggy/Closure_40/test//com/google/javascript/jscomp/NameAnalyzerTest.java
analyze: testIssue284
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_41
/root/workbench/d4j_buggy/Closure_41/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
analyze: testMethodInference6
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
/root/workbench/d4j_buggy/Closure_41/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testMethodInference6
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
analyze: testIssue368
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_43
/root/workbench/d4j_buggy/Closure_43/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testLends10
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
analyze: testLends11
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_45
/root/workbench/d4j_buggy/Closure_45/test//com/google/javascript/jscomp/RemoveUnusedVarsTest.java
analyze: testIssue618_1
found unk statement expression at 740
    this.removeGlobal = false;
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
-------------
-------------
Closure_47
/root/workbench/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
analyze: testBasicMapping1
add compileAndCheck to all_set
analyze: testBasicMappingGoldenOutput
add checkSourceMap to all_set
analyze: testBasicMapping2
add compileAndCheck to all_set
analyze: testLiteralMappings
add compileAndCheck to all_set
analyze: testLiteralMappingsGoldenOutput
add checkSourceMap to all_set
analyze: testMultilineMapping
add compileAndCheck to all_set
analyze: testMultilineMapping2
add compileAndCheck to all_set
analyze: testMultiFunctionMapping
add compileAndCheck to all_set
analyze: testGoldenOutput0a
add checkSourceMap to all_set
analyze: testGoldenOutput1
found unk statement expression at 147
    detailLevel = SourceMap.DetailLevel.ALL;
add checkSourceMap to all_set
found unk statement expression at 162
    detailLevel = SourceMap.DetailLevel.SYMBOLS;
add checkSourceMap to all_set
analyze: testGoldenOutput2
add checkSourceMap to all_set
analyze: testGoldenOutput3
add checkSourceMap to all_set
analyze: testGoldenOutput4
add checkSourceMap to all_set
analyze: testGoldenOutput5
found unk statement expression at 223
    detailLevel = SourceMap.DetailLevel.ALL;
add checkSourceMap to all_set
found unk statement expression at 268
    detailLevel = SourceMap.DetailLevel.SYMBOLS;
add checkSourceMap to all_set
analyze: testParseSourceMetaMap
add put to all_set
add put to all_set
add put to all_set
add put to all_set
add add to all_set
add append to all_set
add add to all_set
add appendIndexMapTo to all_set
add check to all_set
analyze: testSourceMapMerging
add put to all_set
add put to all_set
add append to all_set
add mergeMapSection to all_set
add mergeMapSection to all_set
add appendTo to all_set
add check to all_set
-------------
-------------
Closure_48
/root/workbench/d4j_buggy/Closure_48/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testIssue586
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_49
/root/workbench/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
analyze: testInline13
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in method recursive, add assertNotNull to pure_name_set
found containsAssert getting True in method recursive, add assertTrue to pure_name_set
found containsAssert getting True in method recursive, add assertNotNull to pure_name_set
found containsAssert getting True in method recursive, add assertNotNull to pure_name_set
analyze: testInline14
add helperInlineReferenceToFunction to all_set
analyze: testInline15
add helperInlineReferenceToFunction to all_set
analyze: testInline16
add helperInlineReferenceToFunction to all_set
analyze: testInline17
add helperInlineReferenceToFunction to all_set
analyze: testInline18
add helperInlineReferenceToFunction to all_set
analyze: testInline19
add helperInlineReferenceToFunction to all_set
analyze: testInline19b
add helperInlineReferenceToFunction to all_set
analyze: testInlineIntoLoop
add helperInlineReferenceToFunction to all_set
add helperInlineReferenceToFunction to all_set
add helperInlineReferenceToFunction to all_set
analyze: testInlineFunctionWithInnerFunction5
add helperInlineReferenceToFunction to all_set
analyze: testBug1897706
add helperInlineReferenceToFunction to all_set
add helperInlineReferenceToFunction to all_set
add helperInlineReferenceToFunction to all_set
/root/workbench/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
analyze: testMutateWithParameters3
add helperMutate to all_set
analyze: testMutate8
add helperMutate to all_set
analyze: testMutateInitializeUninitializedVars1
add helperMutate to all_set
analyze: testMutateInitializeUninitializedVars2
add helperMutate to all_set
analyze: testMutateCallInLoopVars1
add helperMutate to all_set
found unk statement expression at 157
    callInLoop = true;
add helperMutate to all_set
analyze: testMutateFunctionDefinition
add helperMutate to all_set
/root/workbench/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
analyze: testInlineFunctions9
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function INC(x){return x++}" +
analyze: testInlineFunctions10
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function INC(x){return x++}" +
analyze: testInlineFunctions13
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return x}" +
analyze: testInlineFunctions15b
found unk statement expression at 234
    assumeMinimumCapture = false;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(){var x;return function(a){return a+1}}" +
found unk statement expression at 244
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(){var x;return function(a){return a+1}}" +
analyze: testInlineFunctions15d
found unk statement expression at 283
    assumeMinimumCapture = false;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(){var x; return function(a){return a+1}}" +
found unk statement expression at 293
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(){var x; return function(a){return a+1}}" +
analyze: testInlineFunctions16a
found unk statement expression at 313
    assumeMinimumCapture = false;
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function foo(b){return window.bar(function(){c(b)})}" +
found unk statement expression at 318
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testInlineFunctions22
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function plex(a){if(a) return 0;else return 1;}" +
analyze: testInlineFunctions23
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function complex(a){if(a) return 0;else return 1;}" +
analyze: testMixedModeInliningCosting3
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testNoInlineIfParametersModified1
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return x=1}f(undefined)",
analyze: testNoInlineIfParametersModified2
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return (x)=1;}f(2)",
analyze: testNoInlineIfParametersModified3
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return x*=2}f(2)",
analyze: testNoInlineIfParametersModified4
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return x?(x=2):0}f(2)",
analyze: testNoInlineIfParametersModified5
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x,y){return x?(y=2):0}f(2,undefined)",
analyze: testNoInlineIfParametersModified6
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x,y){return x?(y=2):0}f(2)",
analyze: testNoInlineIfParametersModified7
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return++a<++a}f(1)",
analyze: testInlineNeverMutateConstants
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return x=1}f(undefined)",
analyze: testInlineNeverOverrideNewValues
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return++a<++a}f(1)",
analyze: testInlineBlockMutableArgs1
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(x){x+x}foo([])",
analyze: testInlineBlockMutableArgs2
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(x){x+x}foo(new Date)",
analyze: testInlineBlockMutableArgs3
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(x){x+x}foo(true&&new Date)",
analyze: testInlineBlockMutableArgs4
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(x){x+x}foo({})",
analyze: testShadowVariables1
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=0;" +
analyze: testShadowVariables3
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=0;" +
analyze: testShadowVariables6
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=0;" +
analyze: testShadowVariables7
found unk statement expression at 747
    assumeMinimumCapture = false;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=3;" +
found unk statement expression at 755
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=3;" +
analyze: testShadowVariables16
found unk statement expression at 843
    assumeMinimumCapture = false;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=3;" +
found unk statement expression at 852
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=3;" +
analyze: testShadowVariables18
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=0;" +
analyze: testCostBasedInlining9
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return 1 + a + a;}" +
analyze: testCostBasedInlining11
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return a + a;}" +
analyze: testComplexInlineNoResultNoParamCall3
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(){a();b();var z=1+1}function _foo(){f()}",
analyze: testComplexInline7
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x,y){if (x) return y(); else return true;}" +
analyze: testComplexInlineVars7
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x,y){if (x) return y(); else return true;}" +
analyze: testComplexSample
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var foo = function(stylesString, opt_element) { " +
analyze: testComplexFunctionWithFunctionDefinition2
found unk statement expression at 1504
    assumeMinimumCapture = false;
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f(a){call(function(){return})}f()");
found unk statement expression at 1509
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){" +
analyze: testComplexFunctionWithFunctionDefinition2a
found unk statement expression at 1517
    assumeMinimumCapture = false;
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("(function(){" +
found unk statement expression at 1523
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){" +
analyze: testComplexFunctionWithFunctionDefinition3
found unk statement expression at 1531
    assumeMinimumCapture = false;
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f(){var a; call(function(){return a})}f()");
found unk statement expression at 1536
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(){var a; call(function(){return a})}f()",
analyze: testDecomposeFunctionExpressionInCall
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testFunctionExpressionCallInlining11b
found unk statement expression at 1677
    assumeMinimumCapture = false;
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("((function(){var a; return function(){foo()}})())();");
found unk statement expression at 1681
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testFunctionExpressionOmega
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function (f){f(f)})(function(f){f(f)})",
analyze: testInlineWithThis7
found unk statement expression at 1893
    assumeStrictThis = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){a=1;this} f.call();",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){a=1;this} f.call(x, x);",
analyze: testFunctionExpressionYCombinator
found unk statement expression at 1903
    assumeMinimumCapture = false;
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
found unk statement expression at 1928
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testBug4944818
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testIssue423
found unk statement expression at 2114
    assumeMinimumCapture = false;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
found unk statement expression at 2141
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testAnonymous1
found unk statement expression at 2168
    assumeMinimumCapture = false;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();",
found unk statement expression at 2174
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();",
analyze: testAnonymous3
found unk statement expression at 2187
    assumeMinimumCapture = false;
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("(function(){var a=10;(function(){arguments;})()})();");
found unk statement expression at 2190
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){var a=10;(function(){arguments;})()})();",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){(function(){arguments;})()})();",
analyze: testLoopWithFunctionWithFunction
found unk statement expression at 2200
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function _testLocalVariableInLoop_() {\n" +
analyze: testMethodWithFunctionWithFunction
found unk statement expression at 2235
    assumeMinimumCapture = true;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function _testLocalVariable_() {\n" +
/root/workbench/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
analyze: testMakeLocalNamesUniqueWithContext5
found unk statement expression at 210
    this.useDefaultRenamer = true;
add testWithInversion to all_set
found containsAssert getting True in analyze_invocation, add testWithInversion to pure_name_set
qualifier: 
code:     testWithInversion(
add testWithInversion to all_set
found containsAssert getting True in analyze_invocation, add testWithInversion to pure_name_set
qualifier: 
code:     testWithInversion(
add testWithInversion to all_set
found containsAssert getting True in analyze_invocation, add testWithInversion to pure_name_set
qualifier: 
code:     testWithInversion(
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_50
/root/workbench/d4j_buggy/Closure_50/test//com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
analyze: testNoStringJoin
add foldSame to all_set
found containsAssert getting True in method recursive, add testSame to pure_name_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = [].join(',',2)");
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = [].join(f)");
analyze: testStringJoinAdd
add fold to all_set
found containsAssert getting True in method recursive, add test to pure_name_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [].join(',')", "x = \"\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a'].join(',')", "x = \"a\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', foo, 'b', 'c'].join(',')",
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [foo, 'a', 'b', 'c'].join(',')",
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c', foo].join(',')",
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a=', 5].join('')", "x = \"a=5\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(7)", "x = \"a75\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a=', false].join('')", "x = \"a=false\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5', 'c'].join('a very very very long chain')",
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = ['', foo].join('-')");
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = ['', foo, ''].join()");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, ''].join(',')",
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, '', ''].join(',')",
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, '', '', bar].join(',')",
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [1,2,3].join('abcdef')",
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [1,2].join()", "x = '1,2'");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [null,undefined,''].join(',')", "x = ',,'");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [null,undefined,0].join(',')", "x = ',,0'");
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = [[1,2],[3,4]].join()"); // would like: "x = '1,2,3,4'"
-------------
-------------
Closure_51
/root/workbench/d4j_buggy/Closure_51/test//com/google/javascript/jscomp/CodePrinterTest.java
analyze: testIssue582
add assertPrint to all_set
found containsAssert getting True in analyze_invocation, add assertPrint to pure_name_set
qualifier: 
code:     assertPrint("var x = -0.0;", "var x=-0.0");
-------------
-------------
Closure_54
/root/workbench/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testIssue537a
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
analyze: testIssue537b
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
/root/workbench/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
analyze: testPropertyOnUnknownSuperClass2
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("Foo", x.toString());
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("Foo.prototype", x.getImplicitPrototype().toString());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(x.getImplicitPrototype().hasOwnProperty("bar"));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("?", x.getPropertyType("bar").toString());
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(x.isPropertyTypeInferred("bar"));
-------------
-------------
Closure_60
/root/workbench/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
analyze: testIssue504
add add to all_set
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("void function() { alert('hi'); }();",
/root/workbench/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/NodeUtilTest.java
analyze: testGetBooleanValue
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("true");
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("10");
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("'0'");
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("/a/");
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("{}");
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("[]");
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("false");
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("null");
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("0");
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("''");
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("undefined");
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("void 0");
add assertPureBooleanUnknown to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanUnknown to pure_name_set
qualifier: 
code:     assertPureBooleanUnknown("void foo()");
add assertPureBooleanUnknown to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanUnknown to pure_name_set
qualifier: 
code:     assertPureBooleanUnknown("b");
add assertPureBooleanUnknown to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanUnknown to pure_name_set
qualifier: 
code:     assertPureBooleanUnknown("-'0.0'");
add assertPureBooleanUnknown to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanUnknown to pure_name_set
qualifier: 
code:     assertPureBooleanUnknown("{a:foo()}");
add assertPureBooleanUnknown to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanUnknown to pure_name_set
qualifier: 
code:     assertPureBooleanUnknown("[foo()]");
-------------
-------------
Closure_64
/root/workbench/d4j_buggy/Closure_64/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
analyze: testES5StrictUseStrictMultipleInputs
add add to all_set
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("'use strict'", outputSource.substring(0, 12));
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(outputSource.substring(13).indexOf("'use strict'"), -1);
-------------
-------------
Closure_68
/root/workbench/d4j_buggy/Closure_68/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
analyze: testIssue477
add parse to all_set
found containsAssert getting True in method recursive, add assertTrue to pure_name_set
found containsAssert getting True in analyze_invocation, add parse to pure_name_set
qualifier: 
code:     parse("@type function */",
-------------
-------------
Closure_72
/root/workbench/d4j_buggy/Closure_72/test//com/google/javascript/jscomp/InlineFunctionsTest.java
analyze: testInlineFunctions31
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(){ lab:{4;} }" +
-------------
-------------
Closure_74
/root/workbench/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
analyze: testFoldComparison3
add fold to all_set
found containsAssert getting True in method recursive, add test to pure_name_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 == !0", "x = false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !0 == !0", "x = true");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 == !1", "x = true");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 == null", "x = false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 == !0", "x = false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !0 == null", "x = false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!0 == !0", "true");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!1 == null", "false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!1 == !0", "false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!0 == null", "false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !0 === !0", "x = true");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 === !1", "x = true");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 === null", "x = false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 === !0", "x = false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !0 === null", "x = false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!0 === !0", "true");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!1 === null", "false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!1 === !0", "false");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!0 === null", "false");
analyze: testInvertibleOperators
found containsAssert getting True in tryBlock, add assertSameResults to pure_name_set
found containsAssert getting True in tryBlock, add assertSameResults to pure_name_set
found containsAssert getting True in method recursive, add testSame to pure_name_set
found containsAssert getting True in tryBlock, add foldSame to pure_name_set
found containsAssert getting True in tryBlock, add foldSame to pure_name_set
found containsAssert getting True in tryBlock, add assertSameResults to pure_name_set
found containsAssert getting True in tryBlock, add assertSameResults to pure_name_set
found containsAssert getting True in tryBlock, add assertNotSameResults to pure_name_set
get block code:
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = 0;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);
          String inverse = inverses.get(op);

          // Test invertability.
          if (comparators.contains(op) &&
              (uncomparables.contains(a) || uncomparables.contains(b))) {
            assertSameResults(join(a, op, b), "false");
            assertSameResults(join(a, inverse, b), "false");
          } else if (a.equals(b) && equalitors.contains(op)) {
            if (a.equals("NaN") || a.equals("Infinity")) {
              foldSame(join(a, op, b));
              foldSame(join(a, inverse, b));
            } else {
              assertSameResults(join(a, op, b), "true");
              assertSameResults(join(a, inverse, b), "false");
            }
          } else {
            assertNotSameResults(join(a, op, b), join(a, inverse, b));
          }
is pure block
analyze: testCommutativeOperators
found containsAssert getting True in tryBlock, add assertSameResultsOrUncollapsed to pure_name_set
get block code:
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = iOperandA;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);

          // Test commutativity.
          // TODO(nicksantos): Eventually, all cases should be collapsed.
          assertSameResultsOrUncollapsed(join(a, op, b), join(b, op, a));
        }
is pure block
-------------
-------------
Closure_75
/root/workbench/d4j_buggy/Closure_75/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
analyze: testIEString
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("!+'\\v1'");
-------------
-------------
Closure_76
/root/workbench/d4j_buggy/Closure_76/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
analyze: testInExpression2
add inFunction to all_set
found containsAssert getting True in method recursive, add test to pure_name_set
found containsAssert getting True in method recursive, add inFunction to pure_name_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction("var a; (a = 1) || (a = 2); return a");
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction("var a; a = 1; a ? a = 2 : a; return a");
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction("var a; a = 1; a ? a : a =2; return a");
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");
analyze: testIssue384b
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
analyze: testIssue384c
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
analyze: testIssue384d
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
-------------
-------------
Closure_78
/root/workbench/d4j_buggy/Closure_78/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
analyze: testFoldArithmetic
add fold to all_set
found containsAssert getting True in method recursive, add test to pure_name_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 10 + 20", "x = 30");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 2 / 4", "x = 0.5");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 2.25 * 3", "x = 6.75");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("z = x * y", "z = x * y");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = y * 5", "x = y * 5");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 1 / 0", "x = 1 / 0");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 3 % 2", "x = 1");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 3 % -2", "x = 1");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = -1 % 3", "x = -1");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 1 % 0", "x = 1 % 0");
-------------
-------------
Closure_79
/root/workbench/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/NormalizeTest.java
analyze: testIssue
found unk statement expression at 385
    super.allowExternsChanges(true);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a,b,c; var a,b", "a(), b()", "a(), b()", null, null);
/root/workbench/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/VarCheckTest.java
analyze: testVarReferenceInExterns
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("asdf;", "var asdf;",
analyze: testCallInExterns
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("yz();", "function yz() {}",
analyze: testPropReferenceInExterns1
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("asdf.foo;", "var asdf;",
analyze: testPropReferenceInExterns3
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("asdf.foo;", "var asdf;",
found unk statement expression at 154
    externValidationErrorLevel = CheckLevel.ERROR;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
found unk statement expression at 159
    externValidationErrorLevel = CheckLevel.OFF;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("asdf.foo;", "var asdf;", "var asdf;", null, null);
-------------
-------------
Closure_80
/root/workbench/d4j_buggy/Closure_80/test//com/google/javascript/jscomp/NodeUtilTest.java
analyze: testLocalValue1
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x()"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("this"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("arguments"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("new x()"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("(new x()).y"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("(new x())['y']"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("null"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("undefined"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("Infinity"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("NaN"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("1"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("'a'"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("true"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("false"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("[]"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("{}"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("[x]"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("{'a':x}"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("++x"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("--x"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x++"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x--"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x=1"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x=[]"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x=y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x+=y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x*=y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x==y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x!=y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x>y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("(1,2)"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("(x,1)"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("(x,y)"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("1||2"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x||1"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x||y"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("1||y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("1&&2"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x&&1"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x&&y"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("1&&y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x?1:2"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x?x:2"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x?1:x"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x?x:y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("!y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("~y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("y + 1"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("y + z"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("y * z"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("'a' in x"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("typeof x"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x instanceof y"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("void x"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("void 0"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("{}.x"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("{}.toString()"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("o.toString()"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("o.valueOf()"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("delete a.b"));
analyze: testIsBooleanResult
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("1")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("true")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("+true")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("+1")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("-1")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("-Infinity")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("Infinity")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("NaN")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("undefined")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("void 0")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a << b")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a >> b")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a >>> b")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a == b")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a != b")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a === b")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a !== b")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a < b")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a > b")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a <= b")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a >= b")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a in b")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a instanceof b")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("'a'")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("'a'+b")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a+'b'")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a+b")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a()")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("''.a")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a.b")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a.b()")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a().b()")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("new a()")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("delete a")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("([true,false])")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("({a:true})")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("true && false")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("true || false")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a ? true : false")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a,true")));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a=true")));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a=1")));
-------------
-------------
Closure_84
/root/workbench/d4j_buggy/Closure_84/test//com/google/javascript/jscomp/parsing/ParserTest.java
analyze: testDestructuringAssignForbidden4
add parseError to all_set
found containsAssert getting True in method recursive, add assertTrue to pure_name_set
found containsAssert getting True in method recursive, add assertTrue to pure_name_set
found containsAssert getting True in block recursive, add parse to mess_name_set
found containsAssert getting True in method recursive, add assertTrue to pure_name_set
found containsAssert getting True in method recursive, add assertTrue to pure_name_set
found containsAssert getting True in analyze_invocation, add parseError to pure_name_set
qualifier: 
code:     parseError("[x, y] = foo();",
-------------
-------------
Closure_85
/root/workbench/d4j_buggy/Closure_85/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
analyze: testCascadedRemovalOfUnlessUnconditonalJumps
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("switch (a) { case 'a': break; case 'b': break; case 'c': break }",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("switch (a) { case 'a': break; case 'b': case 'c': }",
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo() {" +
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo() {" +
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function foo() {" +
analyze: testIssue311
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function a(b) {\n" +
-------------
-------------
Closure_89
/root/workbench/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
analyze: testAliasCreatedForFunctionDepth1_1
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("var a = function(){}; a.b = 1; var c = a; c.b = 2; a.b != c.b;");
analyze: testAliasCreatedForFunctionDepth1_2
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("var a = function(){}; a.b = 1; f(a); a.b;");
analyze: testAliasCreatedForFunctionDepth1_3
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("var a = function(){}; a.b = 1; new f(a); a.b;");
analyze: testAliasCreatedForFunctionDepth2
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function a() {} var c = a; (function() {a.b = 0;})(); a.b;");
analyze: testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
analyze: testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a = {}; a.b = function (){}; var d = a.b;" +
analyze: testAddPropertyToChildOfUncollapsibleFunctionInLocalScope
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
-------------
-------------
Closure_90
/root/workbench/d4j_buggy/Closure_90/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testBackwardsTypedefUse8
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
analyze: testBackwardsTypedefUse9
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_94
/root/workbench/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/NodeUtilTest.java
analyze: testValidDefine
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("1"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("-3"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("true"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("false"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("'foo'"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testValidDefineValue("x"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testValidDefineValue("null"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testValidDefineValue("undefined"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testValidDefineValue("NaN"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("!true"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("-true"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("1 & 8"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("1 + 8"));
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("'a' + 'b'"));
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testValidDefineValue("1 & foo"));
/root/workbench/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/ProcessDefinesTest.java
analyze: testOverridingString1
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testOverridingString3
add put to all_set
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_96
/root/workbench/d4j_buggy/Closure_96/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testFunctionArguments16
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_98
/root/workbench/d4j_buggy/Closure_98/test//com/google/javascript/jscomp/InlineVariablesTest.java
analyze: testNoInlineAliasesInLoop
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
-------------
-------------
Closure_99
/root/workbench/d4j_buggy/Closure_99/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
analyze: testInterface1
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
analyze: testMethod4
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a.prototype['x' + 'y'] =  function() { this.foo = 3; };");
analyze: testPropertyOfMethod
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure("a.protoype.b = {}; " +
-------------
-------------
Closure_100
/root/workbench/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
analyze: testGlobalThis7
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure("var a = this.foo;");
analyze: testStaticFunction6
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function a() { return function() { this = 8; } }");
analyze: testStaticFunction7
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("var a = function() { return function() { this = 8; } }");
analyze: testStaticFunction8
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure("var a = function() { return this.foo; };");
analyze: testStaticMethod2
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a.b = function() { return function() { this.m2 = 5; } }");
analyze: testStaticMethod3
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a.b.c = function() { return function() { this.m2 = 5; } }");
analyze: testInnerFunction1
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure("function f() { function g() { return this.x; } }");
analyze: testInnerFunction2
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure("function f() { var g = function() { return this.x; } }");
analyze: testInnerFunction3
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure(
-------------
-------------
Closure_103
/root/workbench/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/CheckUnreachableCodeTest.java
analyze: testInstanceOfThrowsException
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f() {try { if (value instanceof type) return true; } " +
/root/workbench/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/ControlFlowAnalysisTest.java
analyze: testInstanceOf
add assertCrossEdge to all_set
found containsAssert getting True in analyze_invocation, add assertCrossEdge to pure_name_set
qualifier: 
code:     assertCrossEdge(cfg, Token.EXPR_RESULT, Token.BLOCK, Branch.ON_EX);
/root/workbench/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/DisambiguatePropertiesTest.java
analyze: testSupertypeReferenceOfSubtypeProperty
add testSets to all_set
found containsAssert getting True in analyze_invocation, add testSets to pure_name_set
qualifier: 
code:     testSets(false, externs, js, result, "{a=[[Bar.prototype]]}");
-------------
-------------
Closure_105
/root/workbench/d4j_buggy/Closure_105/test//com/google/javascript/jscomp/FoldConstantsTest.java
analyze: testStringJoinAdd
add fold to all_set
found containsAssert getting True in method recursive, add test to pure_name_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [].join(',')", "x = \"\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a'].join(',')", "x = \"a\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', foo, 'b', 'c'].join(',')", "x = [\"a\",foo,\"b,c\"].join(\",\")");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [foo, 'a', 'b', 'c'].join(',')", "x = [foo,\"a,b,c\"].join(\",\")");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c', foo].join(',')", "x = [\"a,b,c\",foo].join(\",\")");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a=', 5].join('')", "x = \"a=5\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(7)", "x = \"a75\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a=', false].join('')", "x = \"a=false\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5', 'c'].join('a very very very long chain')",
add foldSame to all_set
found containsAssert getting True in method recursive, add testSame to pure_name_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = ['', foo].join(',')");
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = ['', foo, ''].join(',')");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, ''].join(',')", "x = [',', foo, ''].join(',')");
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, '', ''].join(',')",
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, '', '', bar].join(',')",
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [1,2,3].join('abcdef')",
-------------
-------------
Closure_106
/root/workbench/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
analyze: testJSDocComments
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function A() { /** This is a jsdoc comment */ this.foo; }", ok);
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function A() { /* This is a normal comment */ this.foo; }", e);
/root/workbench/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
analyze: testCrashInCommaOperator
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a = {}; a.b = function() {},a.b();",
analyze: testCrashInNestedAssign
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a = {}; if (a.b = function() {}) a.b();",
analyze: testTwinReferenceCancelsChildCollapsing
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }",
-------------
-------------
Closure_108
/root/workbench/d4j_buggy/Closure_108/test//com/google/javascript/jscomp/ScopedAliasesTest.java
analyze: testIssue1144
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var ns = {};" +
-------------
-------------
Closure_110
/root/workbench/d4j_buggy/Closure_110/test//com/google/javascript/jscomp/ScopedAliasesTest.java
analyze: testFunctionDeclaration
add testScoped to all_set
found containsAssert getting True in analyze_invocation, add testScoped to pure_name_set
qualifier: 
code:     testScoped("if (x) { function f() {} } g(f)",
analyze: testHoistedFunctionDeclaration
add testScoped to all_set
found containsAssert getting True in analyze_invocation, add testScoped to pure_name_set
qualifier: 
code:     testScoped(" g(f); function f() {} ",
-------------
-------------
Closure_115
/root/workbench/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
analyze: testInlineFunctions6
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function BAR_FN(x, y, z) { return z(foo(x + y)) }" +
analyze: testNoInlineIfParametersModified8
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return a.x=2}f(o)", "o.x=2");
analyze: testNoInlineIfParametersModified9
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return a[2]=2}f(o)", "o[2]=2");
analyze: testDoubleInlining1
found unk statement expression at 1098
    allowBlockInlining = false;
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var foo = function(a) { return getWindow(a); };" +
analyze: testBug4944818
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_116
/root/workbench/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/FunctionInjectorTest.java
analyze: testIssue1101a
add helperCanInlineReferenceToFunction to all_set
analyze: testIssue1101b
add helperCanInlineReferenceToFunction to all_set
/root/workbench/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
analyze: testInlineFunctions6
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function BAR_FN(x, y, z) { return z(nochg(x + y)) }" +
analyze: testInlineIfParametersModified8
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return a.x=2}f(o)", "{o.x=2}");
analyze: testInlineIfParametersModified9
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return a[2]=2}f(o)", "{o[2]=2}");
analyze: testDoubleInlining2
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var foo = function(a) { return getWindow(a); };" +
analyze: testBug4944818
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testIssue1101
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_117
/root/workbench/d4j_buggy/Closure_117/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testIssue1047
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_127
/root/workbench/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
analyze: testIssue4177428a
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
analyze: testIssue4177428c
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
analyze: testIssue4177428_continue
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
analyze: testIssue4177428_return
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testDontRemoveBreakInTryFinally
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f() {b:try{throw 9} finally {break b} return 1;}");
analyze: testDontRemoveBreakInTryFinallySwitch
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f() {b:try{throw 9} finally {switch(x) {case 1: break b} } return 1;}");
-------------
-------------
Closure_128
/root/workbench/d4j_buggy/Closure_128/test//com/google/javascript/jscomp/CodePrinterTest.java
analyze: testIssue942
add assertPrint to all_set
found containsAssert getting True in analyze_invocation, add assertPrint to pure_name_set
qualifier: 
code:     assertPrint("var x = {0: 1};", "var x={0:1}");
-------------
-------------
Closure_131
/root/workbench/d4j_buggy/Closure_131/test//com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java
analyze: testDoNotConvert
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[0]");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['']");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[' ']");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[',']");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[';']");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[':']");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['.']");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['0']");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['p ']");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['p' + '']");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[p]");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[P]");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[$]");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[p()]");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['default']");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['A\u0004']");
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("a['\u1d17A']", "a['\u1d17A']");
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");
analyze: testQuotedProps
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("({'':0})");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("({'1.0':0})");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("({'\u1d17A':0})");
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("({'a\u0004b':0})");
-------------

pure name: 49
testSets
testSdfAndFdp
fail
inline
testIR
delegateBooleanAssertion
assertNotSameResults
checkIntegerOverflow
testSameLocal
assertSameResults
testTypes
noInline
test
testLocal
foldSame
verify
assertClose
assertSameResultsOrUncollapsed
assertFraction
parse
assertCrossEdge
assertMessageContains
doTest
assertThat
testClosureTypesMultipleWarnings
assertEquals
inFunction
assertPrint
testFailure
testSame
validateNullToStringStyleRegistry
testScopedFailure
assertNotNull
assertNull
minpackTest
assertFalse
testWithInversion
fold
assertTrue
assertContains
assertPureBooleanTrue
assertReflectionArray
assertSame
assertPureBooleanFalse
testScoped
parseError
doTestUnescapeEntity
verifyZeroInteractions
assertPureBooleanUnknown

mess name: 11
chiSquare
assertEquivalenceOperations
assertFalse
chiSquareTest
assertThat
assertEquals
assertTrue
fail
assertSame
assertNull
parse

empty qualifier: 52
helperInlineReferenceToFunction
testSets
testSdfAndFdp
inline
testIR
delegateBooleanAssertion
helperMutate
checkIntegerOverflow
testSameLocal
when
testTypes
noInline
setFilename
test
testLocal
foldSame
serializeAndBack
verify
assertClose
compileAndCheck
assertFraction
checkSourceMap
parse
assertCrossEdge
doTest
assertThat
testClosureTypesMultipleWarnings
assertEquals
inFunction
assertPrint
testFailure
testSame
validateNullToStringStyleRegistry
testScopedFailure
assertNotNull
assertNull
minpackTest
assertFalse
testWithInversion
fold
assertTrue
assertPureBooleanTrue
check
assertReflectionArray
assertSame
assertPureBooleanFalse
testScoped
parseError
helperCanInlineReferenceToFunction
doTestUnescapeEntity
verifyZeroInteractions
assertPureBooleanUnknown

all name: 120
helperInlineReferenceToFunction
testSets
initMocks
delegateBooleanAssertion
checkIntegerOverflow
testSameLocal
fill
addMonths
println
add
doTest
addEventHandler
testClosureTypesMultipleWarnings
addHours
addPoint
createNumber
testScopedFailure
removeColumn
removeRow
addSeries
setRelativeAccuracy
assertPureBooleanTrue
helperCanInlineReferenceToFunction
setTime
testScoped
mergeMapSection
doTestUnescapeEntity
simpleMethod
setConvergenceChecker
hashCode
addStepHandler
setMaxIterations
put
estimate
when
integrate
appendFixedWidthPadRight
setInitialStepSize
serializeAndBack
assertFraction
checkSourceMap
parse
assertCrossEdge
clear
m1
removeObject
assertNotNull
setAbsoluteAccuracy
addObject
assertFalse
setSeed
mixedVarargs
assertSame
setRangeAxis
assertPureBooleanUnknown
testSdfAndFdp
setObject
inline
helperMutate
addYears
setFilename
test
intArgumentMethod
verify
varargs
assertEquals
inFunction
set
setMaxEvaluations
assertNull
setDefault
minpackTest
setDenominatorDegreesOfFreedom
setMeanImpl
testWithInversion
fold
check
assertPureBooleanFalse
addWeeks
setStartConfiguration
parseError
newRow
setReferencedType
setDomainAxis
setEntry
testIR
addDays
removeValue
setOptionsForCompilationLevel
assertEquivalenceOperations
run
noInline
addOrUpdate
setVarianceImpl
testTypes
testLocal
foldSame
appendTo
deleteFirst
assertClose
floatValue
compileAndCheck
setTimeZone
assertThat
optimize
assertPrint
testFailure
testSame
validateNullToStringStyleRegistry
setGeoMeanImpl
appendFixedWidthPadLeft
append
assertTrue
addValue
assertReflectionArray
appendIndexMapTo
varargsbyte
unitize
verifyZeroInteractions
captureArgumentsFrom

pure blocks: 84
        try {
            //when
            spy(HasConstructor.class);
            //then
            fail();
        } catch (MockitoException e) {
            assertEquals("Unable to create mock instance of type 'HasConstructor'", e.getMessage());
            assertContains("0-arg constructor", e.getCause().getMessage());
        }
-----
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            fail("expecting ArithmeticException");
        } catch (ArithmeticException expected) {
-----
        for (int i = 0; i < reference.length; ++i) {
            Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);
        }
-----
        try {
            //when
            validator.validate(new CallsRealMethods(), inovcationOnIterface);
            //then
            fail();
        } catch (MockitoException e) {}
-----
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));
        }
-----
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
-----
        try {
            MockitoAnnotations.initMocks(new FailingSpy());
            fail();
        } catch (MockitoException e) {
            Assertions.assertThat(e.getMessage()).contains("Unable to create mock instance");
        }
-----
        try {
            smartNull.get();
            fail();
        } catch (SmartNullPointerException ex) {
        	String message = ex.getMessage();
        	assertTrue("Exception message should include oompa and lumpa, but was: " + message,
        			message.contains("oompa, lumpa"));
        }
-----
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            new Timer(-1);
            Assert.fail("It is forbidden to create timer with negative value of timer's duration.");
        } catch (FriendlyReminderException e) {
            Assert.assertTrue(true);
        }
-----
        for (int i = 2000; i <= 10000; i += 2000) {
            ourResult = MathUtils.binomialCoefficient(i, 3);
            exactResult = binomialCoefficient(i, 3);
            assertEquals(exactResult, ourResult);
        }
-----
        try {
            TestUtils.chiSquareTest(expected, observed, .01);
            fail("bad expected count, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
-----
        try {
            testStatistic.chiSquare(unMatchedEx, unMatchedObs);
            fail("arrays have different lengths, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
-----
        for (int n = 0; n <= 200; n++) {
            for (int k = 0; k <= n; k++) {
                long ourResult = -1;
                long exactResult = -1;
                boolean shouldThrow = false;
                boolean didThrow = false;
                try {
                    ourResult = MathUtils.binomialCoefficient(n, k);
                } catch (ArithmeticException ex) {
                    didThrow = true;
                }
                try {
                    exactResult = binomialCoefficient(n, k);
                } catch (ArithmeticException ex) {
                    shouldThrow = true;
                }
                assertEquals(n+","+k, shouldThrow, didThrow);
                assertEquals(n+","+k, exactResult, ourResult);
                assertTrue(n+","+k, (n > 66 || !didThrow));
            }
-----
        try {
            //when
            invocationOnInterface.callRealMethod();
            //then
            fail();
        } catch(MockitoException e) {}
-----
        try {
            f.addValue(new Object());
            fail("Expected ClassCastException"); // Previously would have been IllegalArgument
        } catch (ClassCastException expected) {
-----
        try {
            testStatistic.chiSquareTest(expected, observed, .01);
            fail("bad expected count, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
-----
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            assertEquals(sdf.format(date1), fdf.format(date1));
            assertEquals("2003-01-10T15:33:20", fdf.format(date1));
            assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
            assertEquals("2003-01-10T15:33:20", fdf.format(millis1));
            assertEquals("2003-07-10T09:00:00", fdf.format(date2));
            assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
            assertEquals("2003-07-10T09:00:00", fdf.format(millis2));

            fdf = FastDateFormat.getInstance("Z");
            assertEquals("-0500", fdf.format(date1));
            assertEquals("-0500", fdf.format(cal1));
            assertEquals("-0500", fdf.format(millis1));

            assertEquals("-0400", fdf.format(date2));
            assertEquals("-0400", fdf.format(cal2));
            assertEquals("-0400", fdf.format(millis2));

            fdf = FastDateFormat.getInstance("ZZ");
            assertEquals("-05:00", fdf.format(date1));
            assertEquals("-05:00", fdf.format(cal1));
            assertEquals("-05:00", fdf.format(millis1));

            assertEquals("-04:00", fdf.format(date2));
            assertEquals("-04:00", fdf.format(cal2));
            assertEquals("-04:00", fdf.format(millis2));

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));
            assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
-----
        try {
            //when
            mock(InnerClass.class, withSettings().useConstructor().outerInstance("foo").defaultAnswer(CALLS_REAL_METHODS));
            //then
            fail();
        } catch (MockitoException e) {
            assertEquals("Unable to create mock instance of type 'InnerClass'", e.getMessage());
            assertContains("Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.", e.getCause().getMessage());
        }
-----
        try {
            RandomStringUtils.random(-1, true, true);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
            fail("an exception should have been thrown");
        } catch (FunctionEvaluationException fee) {
            // expected
        } catch (Exception e) {
            fail("wrong exception caught");
        }
-----
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            fail("expecting ArithmeticException");
        } catch (ArithmeticException expected) {
-----
        try {
            //when
            list.get(0);            
            //then
            fail();
        } catch (MockitoException e) {}
-----
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = 0;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);
          String inverse = inverses.get(op);

          // Test invertability.
          if (comparators.contains(op) &&
              (uncomparables.contains(a) || uncomparables.contains(b))) {
            assertSameResults(join(a, op, b), "false");
            assertSameResults(join(a, inverse, b), "false");
          } else if (a.equals(b) && equalitors.contains(op)) {
            if (a.equals("NaN") || a.equals("Infinity")) {
              foldSame(join(a, op, b));
              foldSame(join(a, inverse, b));
            } else {
              assertSameResults(join(a, op, b), "true");
              assertSameResults(join(a, inverse, b), "false");
            }
          } else {
            assertNotSameResults(join(a, op, b), join(a, inverse, b));
          }
-----
        try {
            MathUtils.binomialCoefficient(700, 300);
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
-----
        for (int i = 0; i < refEigenValues.length; ++i) {
            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-5);
            assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7);
        }
-----
        for (int i = 1; i < optima.length; ++i) {
            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);
            assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);
            assertEquals(-1.0, f.value(optima[i]), 1.0e-10);
            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
        }
-----
        for (int nSteps = 1; nSteps < 7; ++nSteps) {
            AdamsMoultonIntegrator integ =
                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);
            TestProblemHandler handler = new TestProblemHandler(pb, integ);
            integ.addStepHandler(handler);
            integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),
                            pb.getFinalTime(), new double[pb.getDimension()]);
            if (nSteps < 4) {
                assertTrue(integ.getEvaluations() > 140);
            } else {
                assertTrue(integ.getEvaluations() < 90);
            }
-----
        try {
            Mockito.timeout(-1);
            Assert.fail("It is forbidden to invoke Mockito.timeout() with negative value.");
        } catch (FriendlyReminderException e) {
            Assert.assertTrue(true);
        }
-----
        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
-----
        try {
            TestUtils.chiSquare(tooShortEx, tooShortObs);
            fail("arguments too short, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
-----
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, "must be in order", "largest-smallest");
        }
-----
        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
            assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));
        }
-----
        try {
            //when
            when(list.get(0)).thenCallRealMethod();
            //then
            fail();
        } catch (MockitoException e) {}
-----
        for (String key : map.keySet()) {
            String value = map.get(key);
            TimeZone juZone = TimeZone.getTimeZone(key);
            DateTimeZone zone = DateTimeZone.forTimeZone(juZone);
            assertEquals(value, zone.getID());
//            System.out.println(juZone);
-----
        for (Class<?> primitiveType : primitiveTypes) {
            Class<?> clone = SerializationUtils.clone(primitiveType);
            assertEquals(primitiveType, clone);
        }
-----
        try {
            testStatistic.chiSquareTest(expected1, observed1, 95);
            fail("alpha out of range, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
-----
        try {
            @SuppressWarnings("unused")
            String[] sa = ArrayUtils.add(stringArray, aString);
            fail("Should have caused IllegalArgumentException");
        } catch (IllegalArgumentException iae){
-----
        try {
            TestUtils.chiSquare(unMatchedEx, unMatchedObs);
            fail("arrays have different lengths, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
-----
        for (int degree = 0; degree < 10; ++degree) {
            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);

            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
            for (int i = 0; i < 40000; ++i) {
                double x = -1.0 + i / 20000.0;
                fitter.addObservedPoint(1.0, x,
                                        p.value(x) + 0.1 * randomizer.nextGaussian());
            }

            final double[] init = new double[degree + 1];
            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));

            for (double x = -1.0; x < 1.0; x += 0.01) {
                double error = FastMath.abs(p.value(x) - fitted.value(x)) /
                              (1.0 + FastMath.abs(p.value(x)));
                maxError = FastMath.max(maxError, error);
                Assert.assertTrue(FastMath.abs(error) < 0.01);
            }
-----
        try {
            RandomStringUtils.random(-1, DUMMY);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            Locale.setDefault(Locale.US);
            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);
            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
            Locale.setDefault(Locale.GERMANY);
            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);

            assertSame(Locale.GERMANY, format1.getLocale());
            assertSame(Locale.US, format2.getLocale());
            assertSame(Locale.GERMANY, format3.getLocale());
            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
            assertTrue(format2 != format3);

        } finally {
            Locale.setDefault(realDefaultLocale);
        }
-----
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            minimizer.getResult();
            fail("an exception should have been thrown");
        } catch (NoDataException ise) {
            // expected
        } catch (Exception e) {
            fail("wrong exception caught");
        }
-----
        try {
            double prob = 0.01;
            FDistribution f = new FDistribution(200000, 200000);
            double result = f.inverseCumulativeProbability(prob);
            Assert.assertTrue(result < 1.0);
        } catch (Exception e) {
            Assert.fail("Failing to calculate inverse cumulative probability");
        }
-----
        try {
            testStatistic.chiSquare(tooShortEx, tooShortObs);
            fail("arguments too short, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
-----
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            v_null.unitize();
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail("wrong exception caught");
        }
-----
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -15);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            dist = new PoissonDistributionImpl(-1);
            fail("negative mean: NotStrictlyPositiveException expected");
        } catch(NotStrictlyPositiveException ex) {
-----
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
-----
        try {
            RandomStringUtils.random(-1, "");
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            v_null.unitVector();
            fail("Expecting ArithmeticException");
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail("wrong exception caught");
        }
-----
        for (int num = 1; num <= maxAdditionalPoints; num++) {
            doTest(new Rosen(), startPoint, boundaries,
                   GoalType.MINIMIZE,
                   1e-12, 1e-6, 2000,
                   num,
                   expected,
                   "num=" + num);
        }
-----
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            NumberUtils.createNumber("--1.1E-700F");
            fail("Expected NumberFormatException");
        } catch (NumberFormatException nfe) {
-----
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
      }
-----
        try {
            ValuedColorEnum.BLUE.compareTo(ValuedLanguageEnum.ENGLISH);
            fail();
        } catch (ClassCastException ex) {
-----
        try {
            Mockito.after(-1);
            Assert.fail("It is forbidden to invoke Mockito.after() with negative value.");
        } catch (FriendlyReminderException e) {
            Assert.assertTrue(true);
        }
-----
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = iOperandA;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);

          // Test commutativity.
          // TODO(nicksantos): Eventually, all cases should be collapsed.
          assertSameResultsOrUncollapsed(join(a, op, b), join(b, op, a));
        }
-----
        try {
            verify(mockTwo, never()).simpleMethod(mock.otherMethod());
            fail();
        } catch (NeverWantedButInvoked e) {}
-----
        try {
            GJChronology.getInstance(DateTimeZone.UTC, cutover);
            fail();
        } catch (IllegalArgumentException ex) {
-----
        try {
            minimizer.getOptima();
            fail("an exception should have been thrown");
        } catch (IllegalStateException ise) {
            // expected
        } catch (Exception e) {
            fail("wrong exception caught");
        }
-----
        for (int i = 0; i < optima.length; ++i) {
            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);
        }
-----
        for (double d0 = -k * h; d0 <= k * h; d0 += h) {
            for (double d1 = -k * h ; d1 <= k * h; d1 += h) {
                for (double d2 = -k * h; d2 <= k * h; d2 += h) {
                    double[] x = new double[] { resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2 };
                    Assert.assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);
                }
-----
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        for (int trials = 500000; trials < 20000000; trials += 100000) {
            BinomialDistribution dist = new BinomialDistribution(trials, 0.5);
            int p = dist.inverseCumulativeProbability(0.5);
            Assert.assertEquals(trials / 2, p);
        }
-----
        try {
            RandomStringUtils.random(-1);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            minimizer.getOptimaValues();
            fail("an exception should have been thrown");
        } catch (IllegalStateException ise) {
            // expected
        } catch (Exception e) {
            fail("wrong exception caught");
        }
-----
        try {
            Locale.setDefault(Locale.US);
            FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);
            FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
            Locale.setDefault(Locale.GERMANY);
            FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);

            assertSame(Locale.GERMANY, format1.getLocale());
            assertSame(Locale.US, format2.getLocale());
            assertSame(Locale.GERMANY, format3.getLocale());
            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
            assertTrue(format2 != format3);

        } finally {
            Locale.setDefault(realDefaultLocale);
        }
-----
        try {
            Fraction c = properFormat.parse(source);
            fail("invalid minus in improper fraction.");
        } catch (ParseException ex) {
-----
        try {
            verify(veryCoolSpy).add(2);
            fail();
        } catch(AssertionError e) {
            Assertions.assertThat(e.getMessage()).contains("veryCoolSpy");
        }
-----
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            fail("expecting ArithmeticException");
        } catch (ArithmeticException expected) {
-----
        try {
            f.addValue(new Object()); // This was OK
            fail("Expected ClassCastException");
        } catch (ClassCastException expected) {
-----
        for (int i = 0; i < optima.length; ++i) {
            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
        }
-----
        try {
            RandomStringUtils.random(-1, (String)null);
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        try {
            TestUtils.chiSquareTest(expected1, observed1, 95);
            fail("alpha out of range, IllegalArgumentException expected");
        } catch (IllegalArgumentException ex) {
-----
        try {
            @SuppressWarnings("unused")
            String[] sa = ArrayUtils.add(stringArray, 0, aString);
            fail("Should have caused IllegalArgumentException");
        } catch (IllegalArgumentException iae){
-----
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            fail();
        } catch (IllegalArgumentException ex) {}
-----
        for (int i = 1; i < 21; i++) {
            assertEquals(i + "! ", factorial(i), MathUtils.factorial(i));
            assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);
            assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);
        }
-----
mess blocks: 37
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(null, new Double(4.0), "S1", "C2");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis("Category"), new NumberAxis("Value"), 
                    new StatisticalBarRenderer());
            plot.setOrientation(PlotOrientation.HORIZONTAL);
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
-----
        for (int i = -10; i < 10; i++) {
            System.out.println(new Complex(0, 1 - 0.1 * i).atan());
        }
-----
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
-----
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(new Double(4.0), null, "S1", "C2");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis("Category"), new NumberAxis("Value"), 
                    new StatisticalBarRenderer());
            plot.setOrientation(PlotOrientation.HORIZONTAL);
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
-----
    	try {
    		d.removeColumn("XXX");
    	}
    	catch (UnknownKeyException e) {
    		pass = true;
    	}
-----
        try {
            data.removeColumn("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
-----
        try {
            data.removeColumn(data.getColumnCount());
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
-----
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] + 3;
        }
-----
        try {
            BufferedImage image = new BufferedImage(200 , 100, 
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);
            g2.dispose();
            success = true;
        }
        catch (Exception e) {
            success = false;
        }
-----
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(new Double(4.0), null, "S1", "C2");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis("Category"), new NumberAxis("Value"), 
                    new StatisticalBarRenderer());
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
-----
        for (double x = start; x < end; x += 1e-3) {
            final double tst = FastMath.sinh(x);
            final double ref = Math.sinh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
-----
        try {
            plot.getRangeAxisIndex(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
-----
      if (problem.getUnboundParameters()[0].getName().endsWith("1")) {
          i0 = 1;
          i1 = 0;
      }
-----
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 0;
        }
-----
        for (int i = 0; i < stat.length; i++) {
            stat[i] = new DescriptiveStatistics();
        }
-----
        try {
            data.removeColumn(-1);
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
-----
        for (double x = start; x > end; x -= 1e-3) {
            final double tst = FastMath.sinh(x);
            final double ref = Math.sinh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
-----
    	try {
    		empty.setCategoryKeys(new String[0]);
    	}
    	catch (RuntimeException e) {
    		pass = false;
    	}
-----
        try {
            data.removeRow(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
-----
        try {
            data.setObject("X", "R1", null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
-----
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
-----
        try {
            data.removeColumn(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
-----
        try {
            plot.getDomainAxisIndex(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
-----
        for (String zone : availableZones) {
            if (!zone.equals(currentZone.getID())) {
                anotherZone = TimeZone.getTimeZone(zone);
            }
-----
    for (int i = 2; i < numAdds; i++) {
      current = new Node(Token.ADD, current);

      // 1000 is printed as 1E3, and screws up our test.
      int num = i % 1000;
      numbers.add(String.valueOf(num));
      current.addChildToBack(Node.newNumber(num));
    }
-----
        try {
            data.setObject("X", null, "C1");
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
-----
        for (double x = start; x < end; x += 1e-3) {
            final double tst = FastMath.cosh(x);
            final double ref = Math.cosh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
-----
        try {
            d2 = (DefaultIntervalCategoryDataset) d1.clone();
        }
        catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
-----
        for (double d= 0; d < 2 * Math.PI; d += 0.01) {
            circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        }
-----
        for (int i = 0; i < nSamples; i++) {
            final double start = min + i * delta;
            stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));
            stat[1].addValue(minimizer.getIterationCount());
            stat[2].addValue(minimizer.getEvaluations());
        }
-----
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i];
        }
-----
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
-----
        try {
            data.removeValue("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;   
        }
-----
        for (double x = start; x > end; x -= 1e-3) {
            final double tst = FastMath.cosh(x);
            final double ref = Math.cosh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
-----
        try {
            data.removeRow("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
-----
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(null, new Double(4.0), "S1", "C2");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis("Category"), new NumberAxis("Value"), 
                    new StatisticalBarRenderer());
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
-----
        for(double i : scores) {
          stats.addValue(i);
        }
-----
primitive asserts: False
-----
qualifiers: 134
integrator
invocationMatcher
properFormat
g2
s
map
sb
binomialCache
image
e
format
veryCoolSpy
inverses
chart
Preconditions
mockTwo
normalize
Mockito
circle
underlying
assumedScope
GJChronology
a
fd
format1
g
equalitors
NodeTraversal
u
d
mock
sdf
d1
SerializationUtils
FastDateFormat
validator
cal2
ArrayUtils
testStatistic
None
cal1
generator
output
dateTimeParser
list
dataset
v
randomizer
loop
Locale
numbers
maps
v_unitize
RandomStringUtils
operators
cfa
Node
DateTimeZone
ParserRunner
inputs
fdf
options
type_that_is_the_upper_bound_of_the_wildcard
gval
multiDirectional
pb
cachedResult
b
format2
problem
f
test
currentZone
ToStringStyle
SystemUtils
stats
uncomparables
overrides
v1
Logger
Asserts
series
message
FastMath
compiler
comparators
points
System.out
Math
invocationOnInterface
args
jsdocParser
associatedNode
LITERAL_OPERANDS
ValuedColorEnum.BLUE
current
TimeZone
estimator
fitted
constraints
ex
testCalendar
CompilationLevel.ADVANCED_OPTIMIZATIONS
optimizer
plot
assumptions
MockitoAnnotations
String
format3
mark
Assert
smartNull
MathUtils
fitter
v_null
decomposition
minimizer
Assertions
empty
dist
dfa
sections
data
Arrays
date1
zone
p
table
date2
entry
NumberUtils
cal
TestUtils
integ
-----
members: 241
getDateInstance
helperInlineReferenceToFunction
testSets
init
contains
initMocks
delegateBooleanAssertion
setInputId
checkIntegerOverflow
testSameLocal
fill
getObject
createBufferedImage
chiSquare
addMonths
println
getEvaluations
add
format
getOptima
getDomainAxisIndex
getKey
process
checkState
doTest
addEventHandler
testClosureTypesMultipleWarnings
addHours
getNorm
addPoint
dispose
createNumber
exp
getIterationCount
testScopedFailure
removeColumn
removeRow
equals
addSeries
getInstance
setRelativeAccuracy
assertContains
assertPureBooleanTrue
helperCanInlineReferenceToFunction
setTime
testScoped
createGraphics
forOffsetHoursMinutes
mergeMapSection
getFinalTime
setCodingConvention
doTestUnescapeEntity
simpleMethod
random
mock
getInitialState
setFileLevelJsDocBuilder
fail
setConvergenceChecker
hashCode
addStepHandler
getAnonymousLogger
setMaxIterations
put
getTimeZone
get
getValue
estimate
inverseCumulativeProbability
integrate
factorial
when
appendFixedWidthPadRight
setInitialStepSize
newNumber
getEigenvector
thenCallRealMethod
draw
addChildToBack
serializeAndBack
longValue
cosh
assertFraction
checkSourceMap
parse
retrieveAndResetParsedJSDocInfo
assertCrossEdge
gcd
clear
m1
outerInstance
getDimension
removeObject
buildRandomPolynomial
assertNotNull
size
setLifeCycleStage
setAbsoluteAccuracy
addObject
assertFalse
printStackTrace
validate
keySet
resetUniqueNameId
setSeed
mixedVarargs
never
assertSame
setRangeAxis
getID
createConfig
getResult
forTimeZone
assertPureBooleanUnknown
analyze
withSettings
setCategoryKeys
getRegistry
testSdfAndFdp
setObject
getName
callRealMethod
atan
subtract
inline
helperMutate
getLocale
getTime
abs
lcm
addYears
compareTo
spy
getRangeAxisIndex
setFilename
test
otherMethod
intArgumentMethod
verify
getDateTimeInstance
replaceAll
varargs
assertMessageContains
unitVector
log
assertEquals
inFunction
set
join
setMaxEvaluations
addObservedPoint
assertNull
rint
factorialLog
entrySet
getFileOverviewJSDocInfo
setDefault
minpackTest
sinh
setDenominatorDegreesOfFreedom
setMeanImpl
defaultAnswer
ulp
testWithInversion
fold
declare
check
after
valueOf
assertPureBooleanFalse
nextGaussian
addWeeks
getInitialTime
setOrientation
setStartConfiguration
parseError
max
newRow
setReferencedType
getUnboundParameters
setDomainAxis
value
setEntry
testIR
addAndCheck
timeout
addDays
assertNotSameResults
removeValue
assertSameResults
setOptionsForCompilationLevel
assertEquivalenceOperations
chiSquareTest
getOptimaValues
isJavaVersionAtLeast
run
addOrUpdate
setVarianceImpl
noInline
getColumnCount
testTypes
testLocal
foldSame
appendTo
deleteFirst
residual
assertClose
floatValue
compileAndCheck
setTimeZone
assertSameResultsOrUncollapsed
getCause
assertThat
optimize
assertPrint
traverse
fit
testFailure
testSame
validateNullToStringStyleRegistry
setGeoMeanImpl
getMessage
useConstructor
getPoint
appendFixedWidthPadLeft
endsWith
binomialCoefficient
setStaticSourceFile
append
assertTrue
addValue
clone
assertReflectionArray
appendIndexMapTo
sin
factorialDouble
cos
varargsbyte
unitize
verifyZeroInteractions
captureArgumentsFrom
-----
